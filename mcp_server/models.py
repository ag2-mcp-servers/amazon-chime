# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:56:23+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=100)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=100)


class AccountStatus(Enum):
    Suspended = 'Suspended'
    Active = 'Active'


class AccountType(Enum):
    Team = 'Team'
    EnterpriseDirectory = 'EnterpriseDirectory'
    EnterpriseLWA = 'EnterpriseLWA'
    EnterpriseOIDC = 'EnterpriseOIDC'


class Alpha2CountryCode(RootModel[constr(pattern=r'[A-Z]{2}')]):
    root: constr(pattern=r'[A-Z]{2}')


class AppInstanceDataType(Enum):
    Channel = 'Channel'
    ChannelMessage = 'ChannelMessage'


class AreaCode(RootModel[constr(pattern=r'^$|^[0-9]{3,3}$')]):
    root: constr(pattern=r'^$|^[0-9]{3,3}$')


class Arn(RootModel[SecretStr]):
    root: SecretStr


class ArtifactsState(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class AssociatePhoneNumberWithUserResponse(BaseModel):
    pass


class AssociateSigninDelegateGroupsWithAccountResponse(BaseModel):
    pass


class AudioMuxType(Enum):
    AudioOnly = 'AudioOnly'
    AudioWithActiveSpeakerVideo = 'AudioWithActiveSpeakerVideo'


class BadRequestException(RootModel[Any]):
    root: Any


class Boolean(RootModel[bool]):
    root: bool


class BotType(Enum):
    ChatBot = 'ChatBot'


class CallingName(RootModel[SecretStr]):
    root: SecretStr


class CallingNameStatus(Enum):
    Unassigned = 'Unassigned'
    UpdateInProgress = 'UpdateInProgress'
    UpdateSucceeded = 'UpdateSucceeded'
    UpdateFailed = 'UpdateFailed'


class CallingRegion(RootModel[str]):
    root: str


class CallingRegionList(RootModel[List[CallingRegion]]):
    root: List[CallingRegion]


class Capability(Enum):
    Voice = 'Voice'
    SMS = 'SMS'


class CapabilityList(RootModel[List[Capability]]):
    root: List[Capability]


class ChannelMembershipType(Enum):
    DEFAULT = 'DEFAULT'
    HIDDEN = 'HIDDEN'


class ChannelMessagePersistenceType(Enum):
    PERSISTENT = 'PERSISTENT'
    NON_PERSISTENT = 'NON_PERSISTENT'


class ChannelMessageType(Enum):
    STANDARD = 'STANDARD'
    CONTROL = 'CONTROL'


class ChannelMode(Enum):
    UNRESTRICTED = 'UNRESTRICTED'
    RESTRICTED = 'RESTRICTED'


class ChannelPrivacy(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class ChimeArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    )


class ClientRequestToken(RootModel[SecretStr]):
    root: SecretStr


class ConflictException(RootModel[Any]):
    root: Any


class Content(RootModel[SecretStr]):
    root: SecretStr


class ContentMuxType(Enum):
    ContentOnly = 'ContentOnly'


class Country(RootModel[constr(pattern=r'^$|^[A-Z]{2,2}$')]):
    root: constr(pattern=r'^$|^[A-Z]{2,2}$')


class CountryList(RootModel[List[Country]]):
    root: List[Country] = Field(..., max_length=100, min_length=1)


class CpsLimit(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CreateAccountRequest(BaseModel):
    Name: AccountName


class CreateAppInstanceAdminRequest(BaseModel):
    AppInstanceAdminArn: ChimeArn


class CreateAppInstanceResponse(BaseModel):
    AppInstanceArn: Optional[ChimeArn] = None


class CreateAppInstanceUserResponse(BaseModel):
    AppInstanceUserArn: Optional[ChimeArn] = None


class CreateChannelBanRequest(BaseModel):
    MemberArn: ChimeArn


class CreateChannelMembershipRequest(BaseModel):
    MemberArn: ChimeArn
    Type: ChannelMembershipType


class CreateChannelModeratorRequest(BaseModel):
    ChannelModeratorArn: ChimeArn


class CreateChannelResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None


class DataRetentionInHours(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class DeleteAccountRequest(BaseModel):
    pass


class DeleteAccountResponse(BaseModel):
    pass


class DeleteAppInstanceAdminRequest(BaseModel):
    pass


class DeleteAppInstanceRequest(BaseModel):
    pass


class DeleteAppInstanceStreamingConfigurationsRequest(BaseModel):
    pass


class DeleteAppInstanceUserRequest(BaseModel):
    pass


class DeleteAttendeeRequest(BaseModel):
    pass


class DeleteChannelBanRequest(BaseModel):
    pass


class DeleteChannelMembershipRequest(BaseModel):
    pass


class DeleteChannelMessageRequest(BaseModel):
    pass


class DeleteChannelModeratorRequest(BaseModel):
    pass


class DeleteChannelRequest(BaseModel):
    pass


class DeleteEventsConfigurationRequest(BaseModel):
    pass


class DeleteMediaCapturePipelineRequest(BaseModel):
    pass


class DeleteMeetingRequest(BaseModel):
    pass


class DeletePhoneNumberRequest(BaseModel):
    pass


class DeleteProxySessionRequest(BaseModel):
    pass


class DeleteRoomMembershipRequest(BaseModel):
    pass


class DeleteRoomRequest(BaseModel):
    pass


class DeleteSipMediaApplicationRequest(BaseModel):
    pass


class DeleteSipRuleRequest(BaseModel):
    pass


class DeleteVoiceConnectorEmergencyCallingConfigurationRequest(BaseModel):
    pass


class DeleteVoiceConnectorGroupRequest(BaseModel):
    pass


class DeleteVoiceConnectorOriginationRequest(BaseModel):
    pass


class DeleteVoiceConnectorProxyRequest(BaseModel):
    pass


class DeleteVoiceConnectorRequest(BaseModel):
    pass


class DeleteVoiceConnectorStreamingConfigurationRequest(BaseModel):
    pass


class DeleteVoiceConnectorTerminationRequest(BaseModel):
    pass


class DescribeAppInstanceAdminRequest(BaseModel):
    pass


class DescribeAppInstanceRequest(BaseModel):
    pass


class DescribeAppInstanceUserRequest(BaseModel):
    pass


class DescribeChannelBanRequest(BaseModel):
    pass


class DescribeChannelMembershipForAppInstanceUserRequest(BaseModel):
    pass


class DescribeChannelMembershipRequest(BaseModel):
    pass


class DescribeChannelModeratedByAppInstanceUserRequest(BaseModel):
    pass


class DescribeChannelModeratorRequest(BaseModel):
    pass


class DescribeChannelRequest(BaseModel):
    pass


class DisassociatePhoneNumberFromUserRequest(BaseModel):
    pass


class DisassociatePhoneNumberFromUserResponse(BaseModel):
    pass


class DisassociateSigninDelegateGroupsFromAccountResponse(BaseModel):
    pass


class E164PhoneNumber(RootModel[SecretStr]):
    root: SecretStr


class E164PhoneNumberList(RootModel[List[E164PhoneNumber]]):
    root: List[E164PhoneNumber]


class EmailAddress(RootModel[SecretStr]):
    root: SecretStr


class EmailStatus(Enum):
    NotSent = 'NotSent'
    Sent = 'Sent'
    Failed = 'Failed'


class ErrorCode(Enum):
    BadRequest = 'BadRequest'
    Conflict = 'Conflict'
    Forbidden = 'Forbidden'
    NotFound = 'NotFound'
    PreconditionFailed = 'PreconditionFailed'
    ResourceLimitExceeded = 'ResourceLimitExceeded'
    ServiceFailure = 'ServiceFailure'
    AccessDenied = 'AccessDenied'
    ServiceUnavailable = 'ServiceUnavailable'
    Throttled = 'Throttled'
    Throttling = 'Throttling'
    Unauthorized = 'Unauthorized'
    Unprocessable = 'Unprocessable'
    VoiceConnectorGroupAssociationsExist = 'VoiceConnectorGroupAssociationsExist'
    PhoneNumberAssociationsExist = 'PhoneNumberAssociationsExist'


class ExternalMeetingIdType(RootModel[SecretStr]):
    root: SecretStr


class ExternalUserIdType(RootModel[SecretStr]):
    root: SecretStr


class ForbiddenException(RootModel[Any]):
    root: Any


class FunctionArn(RootModel[SecretStr]):
    root: SecretStr


class GeoMatchLevel(Enum):
    Country = 'Country'
    AreaCode = 'AreaCode'


class GeoMatchParams(BaseModel):
    AreaCode_1: AreaCode = Field(..., alias='AreaCode')
    Country_1: Country = Field(..., alias='Country')


class GetAccountRequest(BaseModel):
    pass


class GetAccountSettingsRequest(BaseModel):
    pass


class GetAppInstanceRetentionSettingsRequest(BaseModel):
    pass


class GetAppInstanceStreamingConfigurationsRequest(BaseModel):
    pass


class GetAttendeeRequest(BaseModel):
    pass


class GetBotRequest(BaseModel):
    pass


class GetChannelMessageRequest(BaseModel):
    pass


class GetEventsConfigurationRequest(BaseModel):
    pass


class GetMediaCapturePipelineRequest(BaseModel):
    pass


class GetMeetingRequest(BaseModel):
    pass


class GetMessagingSessionEndpointRequest(BaseModel):
    pass


class GetPhoneNumberOrderRequest(BaseModel):
    pass


class GetPhoneNumberRequest(BaseModel):
    pass


class GetProxySessionRequest(BaseModel):
    pass


class GetRetentionSettingsRequest(BaseModel):
    pass


class GetRoomRequest(BaseModel):
    pass


class GetSipMediaApplicationLoggingConfigurationRequest(BaseModel):
    pass


class GetSipMediaApplicationRequest(BaseModel):
    pass


class GetSipRuleRequest(BaseModel):
    pass


class GetUserRequest(BaseModel):
    pass


class GetUserSettingsRequest(BaseModel):
    pass


class GetVoiceConnectorEmergencyCallingConfigurationRequest(BaseModel):
    pass


class GetVoiceConnectorGroupRequest(BaseModel):
    pass


class GetVoiceConnectorLoggingConfigurationRequest(BaseModel):
    pass


class GetVoiceConnectorOriginationRequest(BaseModel):
    pass


class GetVoiceConnectorProxyRequest(BaseModel):
    pass


class GetVoiceConnectorRequest(BaseModel):
    pass


class GetVoiceConnectorStreamingConfigurationRequest(BaseModel):
    pass


class GetVoiceConnectorTerminationHealthRequest(BaseModel):
    pass


class GetVoiceConnectorTerminationRequest(BaseModel):
    pass


class GuidString(
    RootModel[constr(pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}')]
):
    root: constr(pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}')


class Integer(RootModel[int]):
    root: int


class InviteStatus(Enum):
    Pending = 'Pending'
    Accepted = 'Accepted'
    Failed = 'Failed'


class Iso8601Timestamp(RootModel[datetime]):
    root: datetime


class JoinTokenString(RootModel[SecretStr]):
    root: SecretStr


class License(Enum):
    Basic = 'Basic'
    Plus = 'Plus'
    Pro = 'Pro'
    ProTrial = 'ProTrial'


class LicenseList(RootModel[List[License]]):
    root: List[License]


class ListAccountsRequest(BaseModel):
    pass


class ListAppInstanceAdminsRequest(BaseModel):
    pass


class ListAppInstanceUsersRequest(BaseModel):
    pass


class ListAppInstancesRequest(BaseModel):
    pass


class ListAttendeeTagsRequest(BaseModel):
    pass


class ListAttendeesRequest(BaseModel):
    pass


class ListBotsRequest(BaseModel):
    pass


class ListChannelBansRequest(BaseModel):
    pass


class ListChannelMembershipsForAppInstanceUserRequest(BaseModel):
    pass


class ListChannelMembershipsRequest(BaseModel):
    pass


class ListChannelMessagesRequest(BaseModel):
    pass


class ListChannelModeratorsRequest(BaseModel):
    pass


class ListChannelsModeratedByAppInstanceUserRequest(BaseModel):
    pass


class ListChannelsRequest(BaseModel):
    pass


class ListMediaCapturePipelinesRequest(BaseModel):
    pass


class ListMeetingTagsRequest(BaseModel):
    pass


class ListMeetingsRequest(BaseModel):
    pass


class ListPhoneNumberOrdersRequest(BaseModel):
    pass


class ListPhoneNumbersRequest(BaseModel):
    pass


class ListProxySessionsRequest(BaseModel):
    pass


class ListRoomMembershipsRequest(BaseModel):
    pass


class ListRoomsRequest(BaseModel):
    pass


class ListSipMediaApplicationsRequest(BaseModel):
    pass


class ListSipRulesRequest(BaseModel):
    pass


class ListSupportedPhoneNumberCountriesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListUsersRequest(BaseModel):
    pass


class ListVoiceConnectorGroupsRequest(BaseModel):
    pass


class ListVoiceConnectorTerminationCredentialsRequest(BaseModel):
    pass


class ListVoiceConnectorsRequest(BaseModel):
    pass


class LoggingConfiguration(BaseModel):
    EnableMediaMetricLogs: Optional[Boolean] = None
    EnableSIPLogs: Optional[Boolean] = None


class LogoutUserRequest(BaseModel):
    pass


class LogoutUserResponse(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MediaPipelineSinkType(Enum):
    S3Bucket = 'S3Bucket'


class MediaPipelineSourceType(Enum):
    ChimeSdkMeeting = 'ChimeSdkMeeting'


class MediaPipelineStatus(Enum):
    Initializing = 'Initializing'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class MeetingNotificationConfiguration(BaseModel):
    SnsTopicArn: Optional[Arn] = None
    SqsQueueArn: Optional[Arn] = None


class MemberArns(RootModel[List[ChimeArn]]):
    root: List[ChimeArn] = Field(..., max_length=100, min_length=1)


class MemberType(Enum):
    User = 'User'
    Bot = 'Bot'
    Webhook = 'Webhook'


class MessageId(
    RootModel[constr(pattern=r'[-_a-zA-Z0-9]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[-_a-zA-Z0-9]*', min_length=1, max_length=128)


class Metadata(RootModel[SecretStr]):
    root: SecretStr


class NextToken(RootModel[SecretStr]):
    root: SecretStr


class NextTokenString(RootModel[constr(max_length=65535)]):
    root: constr(max_length=65535)


class NonEmptyContent(RootModel[SecretStr]):
    root: SecretStr


class NonEmptyResourceName(RootModel[SecretStr]):
    root: SecretStr


class NonEmptyString(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class NonEmptyString128(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class NonNullableBoolean(RootModel[bool]):
    root: bool


class NotFoundException(RootModel[Any]):
    root: Any


class NotificationTarget(Enum):
    EventBridge = 'EventBridge'
    SNS = 'SNS'
    SQS = 'SQS'


class NullableBoolean(RootModel[bool]):
    root: bool


class NumberSelectionBehavior(Enum):
    PreferSticky = 'PreferSticky'
    AvoidSticky = 'AvoidSticky'


class OrderedPhoneNumberStatus(Enum):
    Processing = 'Processing'
    Acquired = 'Acquired'
    Failed = 'Failed'


class OriginationRoutePriority(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class OriginationRouteProtocol(Enum):
    TCP = 'TCP'
    UDP = 'UDP'


class OriginationRouteWeight(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Participant(BaseModel):
    PhoneNumber: Optional[E164PhoneNumber] = None
    ProxyPhoneNumber: Optional[E164PhoneNumber] = None


class ParticipantPhoneNumberList(RootModel[List[E164PhoneNumber]]):
    root: List[E164PhoneNumber] = Field(..., max_length=2, min_length=2)


class Participants(RootModel[List[Participant]]):
    root: List[Participant]


class PhoneNumberAssociationName(Enum):
    AccountId = 'AccountId'
    UserId = 'UserId'
    VoiceConnectorId = 'VoiceConnectorId'
    VoiceConnectorGroupId = 'VoiceConnectorGroupId'
    SipRuleId = 'SipRuleId'


class PhoneNumberCapabilities(BaseModel):
    InboundCall: Optional[NullableBoolean] = None
    InboundMMS: Optional[NullableBoolean] = None
    InboundSMS: Optional[NullableBoolean] = None
    OutboundCall: Optional[NullableBoolean] = None
    OutboundMMS: Optional[NullableBoolean] = None
    OutboundSMS: Optional[NullableBoolean] = None


class PhoneNumberMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class PhoneNumberOrderStatus(Enum):
    Processing = 'Processing'
    Successful = 'Successful'
    Failed = 'Failed'
    Partial = 'Partial'


class PhoneNumberProductType(Enum):
    BusinessCalling = 'BusinessCalling'
    VoiceConnector = 'VoiceConnector'
    SipMediaApplicationDialIn = 'SipMediaApplicationDialIn'


class PhoneNumberStatus(Enum):
    AcquireInProgress = 'AcquireInProgress'
    AcquireFailed = 'AcquireFailed'
    Unassigned = 'Unassigned'
    Assigned = 'Assigned'
    ReleaseInProgress = 'ReleaseInProgress'
    DeleteInProgress = 'DeleteInProgress'
    ReleaseFailed = 'ReleaseFailed'
    DeleteFailed = 'DeleteFailed'


class PhoneNumberType(Enum):
    Local = 'Local'
    TollFree = 'TollFree'


class PhoneNumberTypeList(RootModel[List[PhoneNumberType]]):
    root: List[PhoneNumberType]


class Port(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class PositiveInteger(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ProfileServiceMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class ProxySessionNameString(RootModel[SecretStr]):
    root: SecretStr


class ProxySessionStatus(Enum):
    Open = 'Open'
    InProgress = 'InProgress'
    Closed = 'Closed'


class PutVoiceConnectorLoggingConfigurationRequest(BaseModel):
    LoggingConfiguration_1: LoggingConfiguration = Field(
        ..., alias='LoggingConfiguration'
    )


class PutVoiceConnectorLoggingConfigurationResponse(BaseModel):
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class PutVoiceConnectorProxyRequest(BaseModel):
    DefaultSessionExpiryMinutes: Integer
    Disabled: Optional[Boolean] = None
    FallBackPhoneNumber: Optional[E164PhoneNumber] = None
    PhoneNumberPoolCountries: CountryList


class RedactChannelMessageRequest(BaseModel):
    pass


class RedactChannelMessageResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')


class RedactConversationMessageRequest(BaseModel):
    pass


class RedactConversationMessageResponse(BaseModel):
    pass


class RedactRoomMessageRequest(BaseModel):
    pass


class RedactRoomMessageResponse(BaseModel):
    pass


class RegenerateSecurityTokenRequest(BaseModel):
    pass


class RegistrationStatus(Enum):
    Unregistered = 'Unregistered'
    Registered = 'Registered'
    Suspended = 'Suspended'


class ResetPersonalPINRequest(BaseModel):
    pass


class ResourceLimitExceededException(RootModel[Any]):
    root: Any


class ResourceName(RootModel[SecretStr]):
    root: SecretStr


class RestorePhoneNumberRequest(BaseModel):
    pass


class ResultMax(RootModel[conint(ge=1, le=99)]):
    root: conint(ge=1, le=99)


class RetentionDays(RootModel[conint(ge=1, le=5475)]):
    root: conint(ge=1, le=5475)


class RoomMembershipRole(Enum):
    Administrator = 'Administrator'
    Member = 'Member'


class RoomRetentionSettings(BaseModel):
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')


class SearchAvailablePhoneNumbersRequest(BaseModel):
    pass


class SendChannelMessageRequest(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Content: NonEmptyContent
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Persistence: ChannelMessagePersistenceType
    Type: ChannelMessageType


class SendChannelMessageResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')


class SensitiveNonEmptyString(RootModel[SecretStr]):
    root: SecretStr


class SensitiveString(RootModel[SecretStr]):
    root: SecretStr


class SensitiveStringList(RootModel[List[SensitiveString]]):
    root: List[SensitiveString]


class ServiceFailureException(RootModel[Any]):
    root: Any


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SigninDelegateGroup(BaseModel):
    GroupName: Optional[NonEmptyString] = None


class SigninDelegateGroupList(RootModel[List[SigninDelegateGroup]]):
    root: List[SigninDelegateGroup]


class SipApplicationPriority(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class SipHeadersMap(RootModel[Optional[Dict[str, SensitiveString]]]):
    root: Optional[Dict[str, SensitiveString]] = None


class SipMediaApplicationCall(BaseModel):
    TransactionId: Optional[GuidString] = None


class SipMediaApplicationEndpoint(BaseModel):
    LambdaArn: Optional[FunctionArn] = None


class SipMediaApplicationEndpointList(RootModel[List[SipMediaApplicationEndpoint]]):
    root: List[SipMediaApplicationEndpoint] = Field(..., max_length=1, min_length=1)


class SipMediaApplicationLoggingConfiguration(BaseModel):
    EnableSipMediaApplicationMessageLogs: Optional[Boolean] = None


class SipMediaApplicationName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SipRuleName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SipRuleTriggerType(Enum):
    ToPhoneNumber = 'ToPhoneNumber'
    RequestUriHostname = 'RequestUriHostname'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class StartMeetingTranscriptionResponse(BaseModel):
    pass


class StopMeetingTranscriptionRequest(BaseModel):
    pass


class StopMeetingTranscriptionResponse(BaseModel):
    pass


class StreamingNotificationTarget(BaseModel):
    NotificationTarget_1: NotificationTarget = Field(..., alias='NotificationTarget')


class StreamingNotificationTargetList(RootModel[List[StreamingNotificationTarget]]):
    root: List[StreamingNotificationTarget] = Field(..., max_length=3, min_length=1)


class String(RootModel[str]):
    root: str


class String128(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class StringList(RootModel[List[String]]):
    root: List[String]


class TagKey(RootModel[SecretStr]):
    root: SecretStr


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagValue(RootModel[SecretStr]):
    root: SecretStr


class TelephonySettings(BaseModel):
    InboundCalling: Boolean
    OutboundCalling: Boolean
    SMS: Boolean


class Termination(BaseModel):
    CallingRegions: Optional[CallingRegionList] = None
    CidrAllowedList: Optional[StringList] = None
    CpsLimit_1: Optional[CpsLimit] = Field(None, alias='CpsLimit')
    DefaultPhoneNumber: Optional[E164PhoneNumber] = None
    Disabled: Optional[Boolean] = None


class TerminationHealth(BaseModel):
    Source: Optional[String] = None
    Timestamp: Optional[Iso8601Timestamp] = None


class ThrottledClientException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class TollFreePrefix(
    RootModel[constr(pattern=r'^8(00|33|44|55|66|77|88)$', min_length=3, max_length=3)]
):
    root: constr(pattern=r'^8(00|33|44|55|66|77|88)$', min_length=3, max_length=3)


class TranscribeContentIdentificationType(Enum):
    PII = 'PII'


class TranscribeContentRedactionType(Enum):
    PII = 'PII'


class TranscribeLanguageCode(Enum):
    en_US = 'en-US'
    en_GB = 'en-GB'
    es_US = 'es-US'
    fr_CA = 'fr-CA'
    fr_FR = 'fr-FR'
    en_AU = 'en-AU'
    it_IT = 'it-IT'
    de_DE = 'de-DE'
    pt_BR = 'pt-BR'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'
    zh_CN = 'zh-CN'
    th_TH = 'th-TH'
    hi_IN = 'hi-IN'


class TranscribeLanguageModelName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class TranscribeLanguageOptions(
    RootModel[constr(pattern=r'^[a-zA-Z-,]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[a-zA-Z-,]+', min_length=1, max_length=200)


class TranscribeMedicalContentIdentificationType(Enum):
    PHI = 'PHI'


class TranscribeMedicalLanguageCode(Enum):
    en_US = 'en-US'


class TranscribeMedicalRegion(Enum):
    us_east_1 = 'us-east-1'
    us_east_2 = 'us-east-2'
    us_west_2 = 'us-west-2'
    ap_southeast_2 = 'ap-southeast-2'
    ca_central_1 = 'ca-central-1'
    eu_west_1 = 'eu-west-1'
    auto = 'auto'


class TranscribeMedicalSpecialty(Enum):
    PRIMARYCARE = 'PRIMARYCARE'
    CARDIOLOGY = 'CARDIOLOGY'
    NEUROLOGY = 'NEUROLOGY'
    ONCOLOGY = 'ONCOLOGY'
    RADIOLOGY = 'RADIOLOGY'
    UROLOGY = 'UROLOGY'


class TranscribeMedicalType(Enum):
    CONVERSATION = 'CONVERSATION'
    DICTATION = 'DICTATION'


class TranscribePartialResultsStability(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class TranscribePiiEntityTypes(
    RootModel[constr(pattern=r'^[A-Z_, ]+', min_length=1, max_length=300)]
):
    root: constr(pattern=r'^[A-Z_, ]+', min_length=1, max_length=300)


class TranscribeRegion(Enum):
    us_east_2 = 'us-east-2'
    us_east_1 = 'us-east-1'
    us_west_2 = 'us-west-2'
    ap_northeast_2 = 'ap-northeast-2'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    ca_central_1 = 'ca-central-1'
    eu_central_1 = 'eu-central-1'
    eu_west_1 = 'eu-west-1'
    eu_west_2 = 'eu-west-2'
    sa_east_1 = 'sa-east-1'
    auto = 'auto'


class TranscribeVocabularyFilterMethod(Enum):
    remove = 'remove'
    mask = 'mask'
    tag = 'tag'


class TranscribeVocabularyNamesOrFilterNamesString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9,-._]+', min_length=1, max_length=3000)]
):
    root: constr(pattern=r'^[a-zA-Z0-9,-._]+', min_length=1, max_length=3000)


class UnauthorizedClientException(RootModel[Any]):
    root: Any


class UnprocessableEntityException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceARN: Arn
    TagKeys: TagKeyList


class UpdateAccountRequest(BaseModel):
    DefaultLicense: Optional[License] = None
    Name: Optional[AccountName] = None


class UpdateAccountSettingsResponse(BaseModel):
    pass


class UpdateAppInstanceRequest(BaseModel):
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: NonEmptyResourceName


class UpdateAppInstanceResponse(BaseModel):
    AppInstanceArn: Optional[ChimeArn] = None


class UpdateAppInstanceUserResponse(BaseModel):
    AppInstanceUserArn: Optional[ChimeArn] = None


class UpdateBotRequest(BaseModel):
    Disabled: Optional[NullableBoolean] = None


class UpdateChannelMessageRequest(BaseModel):
    Content_1: Optional[Content] = Field(None, alias='Content')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')


class UpdateChannelMessageResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')


class UpdateChannelReadMarkerRequest(BaseModel):
    pass


class UpdateChannelReadMarkerResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None


class UpdateChannelRequest(BaseModel):
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Mode: ChannelMode
    Name: NonEmptyResourceName


class UpdateChannelResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None


class UpdatePhoneNumberRequest(BaseModel):
    CallingName_1: Optional[CallingName] = Field(None, alias='CallingName')
    ProductType: Optional[PhoneNumberProductType] = None


class UpdatePhoneNumberRequestItem(BaseModel):
    CallingName_1: Optional[CallingName] = Field(None, alias='CallingName')
    PhoneNumberId: NonEmptyString
    ProductType: Optional[PhoneNumberProductType] = None


class UpdatePhoneNumberRequestItemList(RootModel[List[UpdatePhoneNumberRequestItem]]):
    root: List[UpdatePhoneNumberRequestItem]


class UpdatePhoneNumberSettingsRequest(BaseModel):
    CallingName_1: CallingName = Field(..., alias='CallingName')


class UpdateProxySessionRequest(BaseModel):
    Capabilities: CapabilityList
    ExpiryMinutes: Optional[PositiveInteger] = None


class UpdateRoomMembershipRequest(BaseModel):
    Role: Optional[RoomMembershipRole] = None


class UpdateRoomRequest(BaseModel):
    Name: Optional[SensitiveString] = None


class UpdateSipMediaApplicationCallResponse(BaseModel):
    SipMediaApplicationCall_1: Optional[SipMediaApplicationCall] = Field(
        None, alias='SipMediaApplicationCall'
    )


class UpdateSipMediaApplicationRequest(BaseModel):
    Endpoints: Optional[SipMediaApplicationEndpointList] = None
    Name: Optional[SipMediaApplicationName] = None


class UriType(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class UrlType(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class UserEmailList(RootModel[List[EmailAddress]]):
    root: List[EmailAddress] = Field(..., max_length=50)


class UserError(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage: Optional[String] = None
    UserId: Optional[NonEmptyString] = None


class UserErrorList(RootModel[List[UserError]]):
    root: List[UserError]


class UserId(RootModel[SecretStr]):
    root: SecretStr


class UserIdList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., max_length=50)


class UserName(RootModel[SecretStr]):
    root: SecretStr


class UserSettings(BaseModel):
    Telephony: TelephonySettings


class UserType(Enum):
    PrivateUser = 'PrivateUser'
    SharedDevice = 'SharedDevice'


class ValidateE911AddressRequest(BaseModel):
    AwsAccountId: NonEmptyString
    City: SensitiveNonEmptyString
    Country: SensitiveNonEmptyString
    PostalCode: SensitiveNonEmptyString
    State: SensitiveNonEmptyString
    StreetInfo: SensitiveNonEmptyString
    StreetNumber: SensitiveNonEmptyString


class ValidationResult(RootModel[conint(ge=0, le=2)]):
    root: conint(ge=0, le=2)


class VideoMuxType(Enum):
    VideoOnly = 'VideoOnly'


class VoiceConnectorAwsRegion(Enum):
    us_east_1 = 'us-east-1'
    us_west_2 = 'us-west-2'


class VoiceConnectorGroupName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class VoiceConnectorItemPriority(RootModel[conint(ge=1, le=99)]):
    root: conint(ge=1, le=99)


class VoiceConnectorName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class VoiceConnectorSettings(BaseModel):
    CdrBucket: Optional[String] = None


class AccountsPostRequest(BaseModel):
    Name: constr(pattern=r'.*\S.*', min_length=1, max_length=100) = Field(
        ..., description='The name of the Amazon Chime account.'
    )


class DefaultLicense(Enum):
    Basic = 'Basic'
    Plus = 'Plus'
    Pro = 'Pro'
    ProTrial = 'ProTrial'


class AccountsAccountIdPostRequest(BaseModel):
    DefaultLicense_1: Optional[DefaultLicense] = Field(
        None,
        alias='DefaultLicense',
        description='The default license applied when you add users to an Amazon Chime account.',
    )
    Name: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=100)] = Field(
        None, description='The new name for the specified Amazon Chime account.'
    )


class Operation(Enum):
    associate_signin_delegate_groups = 'associate-signin-delegate-groups'


class AccountsAccountIdOperationAssociateSigninDelegateGroupsPostRequest(BaseModel):
    SigninDelegateGroups: List[SigninDelegateGroup] = Field(
        ..., description='The sign-in delegate groups.'
    )


class Operation2(Enum):
    disassociate_signin_delegate_groups = 'disassociate-signin-delegate-groups'


class AccountsAccountIdOperationDisassociateSigninDelegateGroupsPostRequest(BaseModel):
    GroupNames: List[String] = Field(
        ..., description='The sign-in delegate group names.', min_length=1
    )


class AccountsAccountIdBotsPostRequest(BaseModel):
    DisplayName: SecretStr = Field(..., description='The bot display name.')
    Domain: Optional[constr(pattern=r'.*\S.*')] = Field(
        None, description='The domain of the Amazon Chime Enterprise account.'
    )


class AccountsAccountIdBotsBotIdPostRequest(BaseModel):
    Disabled: Optional[bool] = Field(
        None,
        description='When true, stops the specified bot from running in your account.',
    )


class Operation4(Enum):
    regenerate_security_token = 'regenerate-security-token'


class AccountsAccountIdBotsBotIdEventsConfigurationPutRequest(BaseModel):
    LambdaFunctionArn: Optional[SecretStr] = Field(
        None,
        description='Lambda function ARN that allows the bot to receive outgoing events.',
    )
    OutboundEventsHTTPSEndpoint: Optional[SecretStr] = Field(
        None,
        description='HTTPS endpoint that allows the bot to receive outgoing events.',
    )


class Operation6(Enum):
    redact = 'redact'


class AccountsAccountIdRoomsPostRequest(BaseModel):
    ClientRequestToken: Optional[SecretStr] = Field(
        None, description='The idempotency token for the request.'
    )
    Name: SecretStr = Field(..., description='The room name.')


class AccountsAccountIdRoomsRoomIdPostRequest(BaseModel):
    Name: Optional[SecretStr] = Field(None, description='The room name.')


class Role(Enum):
    Administrator = 'Administrator'
    Member = 'Member'


class AccountsAccountIdRoomsRoomIdMembershipsPostRequest(BaseModel):
    MemberId: constr(pattern=r'.*\S.*') = Field(
        ..., description='The Amazon Chime member ID (user ID or bot ID).'
    )
    Role_1: Optional[Role] = Field(
        None, alias='Role', description='The role of the member.'
    )


class Operation8(Enum):
    batch_create = 'batch-create'


class AccountsAccountIdRoomsRoomIdMembershipsMemberIdPostRequest(BaseModel):
    Role_1: Optional[Role] = Field(
        None, alias='Role', description='The role of the member.'
    )


class Operation10(Enum):
    redact = 'redact'


class AccountSettings(BaseModel):
    DisableRemoteControl: Optional[Boolean] = None
    EnableDialOut: Optional[Boolean] = None


class AccountsAccountIdSettingsPutRequest(BaseModel):
    AccountSettings_1: AccountSettings = Field(
        ...,
        alias='AccountSettings',
        description='Settings related to the Amazon Chime account. This includes settings that start or stop remote control of shared screens, or start or stop the dial-out option in the Amazon Chime web application. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.',
    )


class Operation12(Enum):
    add = 'add'


class AccountsAccountIdUsersOperationAddPostRequest(BaseModel):
    UserEmailList: List[EmailAddress] = Field(
        ...,
        description='The user email addresses to which to send the email invitation.',
        max_length=50,
    )
    UserType_1: Optional[UserType] = Field(
        None, alias='UserType', description='The user type.'
    )


class Operation14(Enum):
    create = 'create'


class AccountsAccountIdUsersOperationCreatePostRequest(BaseModel):
    Email: Optional[SecretStr] = Field(None, description="The user's email address.")
    UserType_1: Optional[UserType] = Field(
        None, alias='UserType', description='The user type.'
    )
    Username: Optional[str] = Field(None, description='The user name.')


class Operation16(Enum):
    suspend = 'suspend'


class AccountsAccountIdUsersOperationSuspendPostRequest(BaseModel):
    UserIdList: List[NonEmptyString] = Field(
        ...,
        description='The request containing the user IDs to suspend.',
        max_length=50,
    )


class Operation18(Enum):
    unsuspend = 'unsuspend'


class AccountsAccountIdUsersOperationUnsuspendPostRequest(BaseModel):
    UserIdList: List[NonEmptyString] = Field(
        ...,
        description='The request containing the user IDs to unsuspend.',
        max_length=50,
    )


class AlexaForBusinessMetadata(BaseModel):
    AlexaForBusinessRoomArn: Optional[SensitiveString] = None
    IsAlexaForBusinessEnabled: Optional[Boolean] = None


class LicenseType(Enum):
    Basic = 'Basic'
    Plus = 'Plus'
    Pro = 'Pro'
    ProTrial = 'ProTrial'


class AccountsAccountIdUsersUserIdPostRequest(BaseModel):
    AlexaForBusinessMetadata_1: Optional[AlexaForBusinessMetadata] = Field(
        None,
        alias='AlexaForBusinessMetadata',
        description='The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.',
    )
    LicenseType_1: Optional[LicenseType] = Field(
        None,
        alias='LicenseType',
        description='The user license type to update. This must be a supported license type for the Amazon Chime account that the user belongs to.',
    )
    UserType_1: Optional[UserType] = Field(
        None, alias='UserType', description='The user type.'
    )


class Operation20(Enum):
    associate_phone_number = 'associate-phone-number'


class AccountsAccountIdUsersUserIdOperationAssociatePhoneNumberPostRequest(BaseModel):
    E164PhoneNumber: SecretStr = Field(
        ..., description='The phone number, in E.164 format.'
    )


class Operation22(Enum):
    disassociate_phone_number = 'disassociate-phone-number'


class Operation24(Enum):
    logout = 'logout'


class Operation26(Enum):
    reset_personal_pin = 'reset-personal-pin'


class UserSettings1(BaseModel):
    Telephony: Optional[TelephonySettings] = None


class AccountsAccountIdUsersUserIdSettingsPutRequest(BaseModel):
    UserSettings: UserSettings1 = Field(
        ...,
        description='Settings associated with an Amazon Chime user, including inbound and outbound calling and text messaging.',
    )


class AppInstanceUsersAppInstanceUserArnPutRequest(BaseModel):
    Metadata: Optional[SecretStr] = Field(
        None, description='The metadata of the <code>AppInstanceUser</code>.'
    )
    Name: SecretStr = Field(
        ..., description='The name of the <code>AppInstanceUser</code>.'
    )


class AppInstancesAppInstanceArnPutRequest(BaseModel):
    Metadata: Optional[SecretStr] = Field(
        None, description='The metadata that you want to change.'
    )
    Name: SecretStr = Field(..., description='The name that you want to change.')


class AppInstancesAppInstanceArnAdminsPostRequest(BaseModel):
    AppInstanceAdminArn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Field(
        ...,
        description='The ARN of the administrator of the current <code>AppInstance</code>.',
    )


class Mode(Enum):
    UNRESTRICTED = 'UNRESTRICTED'
    RESTRICTED = 'RESTRICTED'


class Privacy(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class Scope(Enum):
    app_instance_user_memberships = 'app-instance-user-memberships'


class Scope2(Enum):
    app_instance_user_moderated_channels = 'app-instance-user-moderated-channels'


class ChannelsChannelArnPutRequest(BaseModel):
    Metadata: Optional[SecretStr] = Field(
        None, description='The metadata for the update request.'
    )
    Mode_1: Mode = Field(
        ..., alias='Mode', description='The mode of the update request.'
    )
    Name: SecretStr = Field(..., description='The name of the channel.')


class Scope4(Enum):
    app_instance_user_membership = 'app-instance-user-membership'


class Scope6(Enum):
    app_instance_user_moderated_channel = 'app-instance-user-moderated-channel'


class ChannelsChannelArnBansPostRequest(BaseModel):
    MemberArn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Field(..., description='The ARN of the member being banned.')


class Type(Enum):
    DEFAULT = 'DEFAULT'
    HIDDEN = 'HIDDEN'


class ChannelsChannelArnMembershipsPostRequest(BaseModel):
    MemberArn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Field(..., description='The ARN of the member you want to add to the channel.')
    Type_1: Type = Field(
        ...,
        alias='Type',
        description='The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.',
    )


class Operation28(Enum):
    batch_create = 'batch-create'


class ChannelsChannelArnMembershipsOperationBatchCreatePostRequest(BaseModel):
    MemberArns: List[ChimeArn] = Field(
        ...,
        description='The ARNs of the members you want to add to the channel.',
        max_length=100,
        min_length=1,
    )
    Type_1: Optional[Type] = Field(
        None,
        alias='Type',
        description='The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.',
    )


class Persistence(Enum):
    PERSISTENT = 'PERSISTENT'
    NON_PERSISTENT = 'NON_PERSISTENT'


class Type4(Enum):
    STANDARD = 'STANDARD'
    CONTROL = 'CONTROL'


class ChannelsChannelArnMessagesPostRequest(BaseModel):
    ClientRequestToken: SecretStr = Field(
        ..., description='The <code>Idempotency</code> token for each client request.'
    )
    Content: SecretStr = Field(..., description='The content of the message.')
    Metadata: Optional[SecretStr] = Field(
        None, description='The optional metadata for each message.'
    )
    Persistence_1: Persistence = Field(
        ...,
        alias='Persistence',
        description='Boolean that controls whether the message is persisted on the back end. Required.',
    )
    Type: Type4 = Field(
        ...,
        description='The type of message, <code>STANDARD</code> or <code>CONTROL</code>.',
    )


class ChannelsChannelArnMessagesMessageIdPutRequest(BaseModel):
    Content: Optional[SecretStr] = Field(
        None, description='The content of the message being updated.'
    )
    Metadata: Optional[SecretStr] = Field(
        None, description='The metadata of the message being updated.'
    )


class Operation30(Enum):
    redact = 'redact'


class ChannelsChannelArnModeratorsPostRequest(BaseModel):
    ChannelModeratorArn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Field(..., description='The ARN of the moderator.')


class EmergencyCallingAddressPostRequest(BaseModel):
    AwsAccountId: constr(pattern=r'.*\S.*') = Field(
        ..., description='The AWS account ID.'
    )
    City: SecretStr = Field(
        ..., description='The address city, such as <code>Portland</code>.'
    )
    Country: SecretStr = Field(
        ..., description='The address country, such as <code>US</code>. '
    )
    PostalCode: SecretStr = Field(
        ..., description='The address postal code, such as <code>04352</code>.'
    )
    State: SecretStr = Field(
        ..., description='The address state, such as <code>ME</code>.'
    )
    StreetInfo: SecretStr = Field(
        ...,
        description='The address street information, such as <code>8th Avenue</code>.',
    )
    StreetNumber: SecretStr = Field(
        ...,
        description='The address street number, such as <code>200</code> or <code>2121</code>.',
    )


class SinkType(Enum):
    S3Bucket = 'S3Bucket'


class SourceType(Enum):
    ChimeSdkMeeting = 'ChimeSdkMeeting'


class NotificationsConfiguration(BaseModel):
    SnsTopicArn: Optional[Arn] = None
    SqsQueueArn: Optional[Arn] = None


class Operation32(Enum):
    create_attendees = 'create-attendees'


class Operation34(Enum):
    batch_create = 'batch-create'


class Operation36(Enum):
    add = 'add'


class Operation38(Enum):
    delete = 'delete'


class MeetingsMeetingIdAttendeesAttendeeIdTagsOperationDeletePostRequest(BaseModel):
    TagKeys: List[TagKey] = Field(
        ..., description='The tag keys.', max_length=10, min_length=1
    )


class MeetingsMeetingIdDialOutsPostRequest(BaseModel):
    FromPhoneNumber: SecretStr = Field(
        ...,
        description='Phone number used as the caller ID when the remote party receives a call.',
    )
    JoinToken: SecretStr = Field(
        ...,
        description='Token used by the Amazon Chime SDK attendee. Call the <a href="https://docs.aws.amazon.com/chime/latest/APIReference/API_CreateAttendee.html">CreateAttendee</a> action to get a join token.',
    )
    ToPhoneNumber: SecretStr = Field(
        ..., description='Phone number called when inviting someone to a meeting.'
    )


class Operation40(Enum):
    add = 'add'


class Operation42(Enum):
    delete = 'delete'


class MeetingsMeetingIdTagsOperationDeletePostRequest(BaseModel):
    TagKeys: List[TagKey] = Field(
        ..., description='The tag keys.', max_length=50, min_length=1
    )


class Operation44(Enum):
    start = 'start'


class Operation46(Enum):
    stop = 'stop'


class ProductType(Enum):
    BusinessCalling = 'BusinessCalling'
    VoiceConnector = 'VoiceConnector'
    SipMediaApplicationDialIn = 'SipMediaApplicationDialIn'


class PhoneNumberOrdersPostRequest(BaseModel):
    E164PhoneNumbers: List[E164PhoneNumber] = Field(
        ..., description='List of phone numbers, in E.164 format.'
    )
    ProductType_1: ProductType = Field(
        ..., alias='ProductType', description='The phone number product type.'
    )


class Status(Enum):
    AcquireInProgress = 'AcquireInProgress'
    AcquireFailed = 'AcquireFailed'
    Unassigned = 'Unassigned'
    Assigned = 'Assigned'
    ReleaseInProgress = 'ReleaseInProgress'
    DeleteInProgress = 'DeleteInProgress'
    ReleaseFailed = 'ReleaseFailed'
    DeleteFailed = 'DeleteFailed'


class FilterName(Enum):
    AccountId = 'AccountId'
    UserId = 'UserId'
    VoiceConnectorId = 'VoiceConnectorId'
    VoiceConnectorGroupId = 'VoiceConnectorGroupId'
    SipRuleId = 'SipRuleId'


class Operation48(Enum):
    batch_delete = 'batch-delete'


class PhoneNumbersOperationBatchDeletePostRequest(BaseModel):
    PhoneNumberIds: List[String] = Field(
        ..., description='List of phone number IDs.', min_length=1
    )


class Operation50(Enum):
    batch_update = 'batch-update'


class PhoneNumbersOperationBatchUpdatePostRequest(BaseModel):
    UpdatePhoneNumberRequestItems: List[UpdatePhoneNumberRequestItem] = Field(
        ...,
        description='The request containing the phone number IDs and product types or calling names to update.',
    )


class PhoneNumbersPhoneNumberIdPostRequest(BaseModel):
    CallingName: Optional[SecretStr] = Field(
        None, description='The outbound calling name associated with the phone number.'
    )
    ProductType_1: Optional[ProductType] = Field(
        None, alias='ProductType', description='The product type.'
    )


class Operation52(Enum):
    restore = 'restore'


class Type5(Enum):
    phone_numbers = 'phone-numbers'


class BusinessCalling(BaseModel):
    CdrBucket: Optional[String] = None


class VoiceConnector1(BaseModel):
    CdrBucket: Optional[String] = None


class SettingsPutRequest(BaseModel):
    BusinessCalling_1: Optional[BusinessCalling] = Field(
        None,
        alias='BusinessCalling',
        description="The Amazon Chime Business Calling settings for the administrator's AWS account. Includes any Amazon S3 buckets designated for storing call detail records.",
    )
    VoiceConnector: Optional[VoiceConnector1] = Field(
        None,
        description='The Amazon Chime Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.',
    )


class SettingsPhoneNumberPutRequest(BaseModel):
    CallingName: SecretStr = Field(
        ..., description='The default outbound calling name for the account.'
    )


class SipMediaApplicationsPostRequest(BaseModel):
    AwsRegion: str = Field(
        ..., description='The AWS Region assigned to the SIP media application.'
    )
    Endpoints: List[SipMediaApplicationEndpoint] = Field(
        ...,
        description='List of endpoints (Lambda Amazon Resource Names) specified for the SIP media application. Currently, only one endpoint is supported.',
        max_length=1,
        min_length=1,
    )
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The SIP media application name.'
    )


class SipMediaApplicationsSipMediaApplicationIdPutRequest(BaseModel):
    Endpoints: Optional[List[SipMediaApplicationEndpoint]] = Field(
        None,
        description='The new set of endpoints for the specified SIP media application.',
        max_length=1,
        min_length=1,
    )
    Name: Optional[constr(min_length=1, max_length=256)] = Field(
        None, description='The new name for the specified SIP media application.'
    )


class SipMediaApplicationsSipMediaApplicationIdCallsPostRequest(BaseModel):
    FromPhoneNumber: SecretStr = Field(
        ...,
        description='The phone number that a user calls from. This is a phone number in your Amazon Chime phone number inventory.',
    )
    SipHeaders: Optional[Dict[str, SensitiveString]] = Field(
        None, description='The SIP headers added to an outbound call leg.'
    )
    ToPhoneNumber: SecretStr = Field(
        ..., description='The phone number that the service should call.'
    )


class SipMediaApplicationsSipMediaApplicationIdCallsTransactionIdPostRequest(BaseModel):
    Arguments: Dict[str, SensitiveString] = Field(
        ...,
        description='Arguments made available to the Lambda function as part of the <code>CALL_UPDATE_REQUESTED</code> event. Can contain 0-20 key-value pairs.',
    )


class SipMediaApplicationsSipMediaApplicationIdLoggingConfigurationPutRequest(
    BaseModel
):
    SipMediaApplicationLoggingConfiguration_1: Optional[
        SipMediaApplicationLoggingConfiguration
    ] = Field(
        None,
        alias='SipMediaApplicationLoggingConfiguration',
        description='Logging configuration of the SIP media application.',
    )


class TriggerType(Enum):
    ToPhoneNumber = 'ToPhoneNumber'
    RequestUriHostname = 'RequestUriHostname'


class Operation54(Enum):
    tag_resource = 'tag-resource'


class Operation56(Enum):
    untag_resource = 'untag-resource'


class TagsOperationUntagResourcePostRequest(BaseModel):
    ResourceARN: SecretStr = Field(..., description='The resource ARN.')
    TagKeys: List[TagKey] = Field(
        ..., description='The tag keys.', max_length=50, min_length=1
    )


class Operation58(Enum):
    associate_phone_numbers = 'associate-phone-numbers'


class VoiceConnectorGroupsVoiceConnectorGroupIdOperationAssociatePhoneNumbersPostRequest(
    BaseModel
):
    E164PhoneNumbers: List[E164PhoneNumber] = Field(
        ..., description='List of phone numbers, in E.164 format.'
    )
    ForceAssociate: Optional[bool] = Field(
        None,
        description='If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.',
    )


class Operation60(Enum):
    disassociate_phone_numbers = 'disassociate-phone-numbers'


class VoiceConnectorGroupsVoiceConnectorGroupIdOperationDisassociatePhoneNumbersPostRequest(
    BaseModel
):
    E164PhoneNumbers: List[E164PhoneNumber] = Field(
        ..., description='List of phone numbers, in E.164 format.'
    )


class AwsRegion(Enum):
    us_east_1 = 'us-east-1'
    us_west_2 = 'us-west-2'


class VoiceConnectorsPostRequest(BaseModel):
    AwsRegion_1: Optional[AwsRegion] = Field(
        None,
        alias='AwsRegion',
        description=' The AWS Region in which the Amazon Chime Voice Connector is created. Default value: <code>us-east-1</code> . ',
    )
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the Amazon Chime Voice Connector.'
    )
    RequireEncryption: bool = Field(
        ...,
        description='When enabled, requires encryption for the Amazon Chime Voice Connector.',
    )


class VoiceConnectorsVoiceConnectorIdPutRequest(BaseModel):
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the Amazon Chime Voice Connector.'
    )
    RequireEncryption: bool = Field(
        ...,
        description='When enabled, requires encryption for the Amazon Chime Voice Connector.',
    )


class Operation62(Enum):
    associate_phone_numbers = 'associate-phone-numbers'


class VoiceConnectorsVoiceConnectorIdOperationAssociatePhoneNumbersPostRequest(
    BaseModel
):
    E164PhoneNumbers: List[E164PhoneNumber] = Field(
        ..., description='List of phone numbers, in E.164 format.'
    )
    ForceAssociate: Optional[bool] = Field(
        None,
        description='If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.',
    )


class Operation64(Enum):
    disassociate_phone_numbers = 'disassociate-phone-numbers'


class VoiceConnectorsVoiceConnectorIdOperationDisassociatePhoneNumbersPostRequest(
    BaseModel
):
    E164PhoneNumbers: List[E164PhoneNumber] = Field(
        ..., description='List of phone numbers, in E.164 format.'
    )


class VoiceConnectorsVoiceConnectorIdLoggingConfigurationPutRequest(BaseModel):
    LoggingConfiguration_1: LoggingConfiguration = Field(
        ...,
        alias='LoggingConfiguration',
        description='The logging configuration associated with an Amazon Chime Voice Connector. Specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.',
    )


class VoiceConnectorsVoiceConnectorIdProgrammableNumbersProxyPutRequest(BaseModel):
    DefaultSessionExpiryMinutes: int = Field(
        ..., description='The default number of minutes allowed for proxy sessions.'
    )
    Disabled: Optional[bool] = Field(
        None,
        description='When true, stops proxy sessions from being created on the specified Amazon Chime Voice Connector.',
    )
    FallBackPhoneNumber: Optional[SecretStr] = Field(
        None,
        description='The phone number to route calls to after a proxy session expires.',
    )
    PhoneNumberPoolCountries: List[Country] = Field(
        ...,
        description='The countries for proxy phone numbers to be selected from.',
        max_length=100,
        min_length=1,
    )


class Status2(Enum):
    Open = 'Open'
    InProgress = 'InProgress'
    Closed = 'Closed'


class GeoMatchParams1(BaseModel):
    AreaCode_1: Optional[AreaCode] = Field(None, alias='AreaCode')
    Country_1: Optional[Country] = Field(None, alias='Country')


class VoiceConnectorsVoiceConnectorIdProxySessionsPostRequest(BaseModel):
    Capabilities: List[Capability] = Field(
        ..., description='The proxy session capabilities.'
    )
    ExpiryMinutes: Optional[conint(ge=1)] = Field(
        None, description='The number of minutes allowed for the proxy session.'
    )
    GeoMatchLevel_1: Optional[GeoMatchLevel] = Field(
        None,
        alias='GeoMatchLevel',
        description='The preference for matching the country or area code of the proxy phone number with that of the first participant.',
    )
    GeoMatchParams: Optional[GeoMatchParams1] = Field(
        None,
        description='The country and area code for a proxy phone number in a proxy phone session.',
    )
    Name: Optional[SecretStr] = Field(
        None, description='The name of the proxy session.'
    )
    NumberSelectionBehavior_1: Optional[NumberSelectionBehavior] = Field(
        None,
        alias='NumberSelectionBehavior',
        description='The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.',
    )
    ParticipantPhoneNumbers: List[E164PhoneNumber] = Field(
        ..., description='The participant phone numbers.', max_length=2, min_length=2
    )


class VoiceConnectorsVoiceConnectorIdProxySessionsProxySessionIdPostRequest(BaseModel):
    Capabilities: List[Capability] = Field(
        ..., description='The proxy session capabilities.'
    )
    ExpiryMinutes: Optional[conint(ge=1)] = Field(
        None, description='The number of minutes allowed for the proxy session.'
    )


class StreamingConfiguration1(BaseModel):
    DataRetentionInHours_1: Optional[DataRetentionInHours] = Field(
        None, alias='DataRetentionInHours'
    )
    Disabled: Optional[Boolean] = None
    StreamingNotificationTargets: Optional[StreamingNotificationTargetList] = None


class VoiceConnectorsVoiceConnectorIdStreamingConfigurationPutRequest(BaseModel):
    StreamingConfiguration: StreamingConfiguration1 = Field(
        ...,
        description='The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.',
    )


class VoiceConnectorsVoiceConnectorIdTerminationPutRequest(BaseModel):
    Termination_1: Termination = Field(
        ...,
        alias='Termination',
        description='Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.',
    )


class Operation66(Enum):
    delete = 'delete'


class VoiceConnectorsVoiceConnectorIdTerminationCredentialsOperationDeletePostRequest(
    BaseModel
):
    Usernames: List[SensitiveString] = Field(
        ...,
        description='The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.',
    )


class Operation68(Enum):
    put = 'put'


class Account(BaseModel):
    AccountId: String
    AccountStatus_1: Optional[AccountStatus] = Field(None, alias='AccountStatus')
    AccountType_1: Optional[AccountType] = Field(None, alias='AccountType')
    AwsAccountId: String
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    DefaultLicense: Optional[License] = None
    Name: String
    SigninDelegateGroups: Optional[SigninDelegateGroupList] = None
    SupportedLicenses: Optional[LicenseList] = None


class AccountList(RootModel[List[Account]]):
    root: List[Account]


class Address(BaseModel):
    city: Optional[SensitiveNonEmptyString] = None
    country: Optional[SensitiveNonEmptyString] = None
    postDirectional: Optional[SensitiveNonEmptyString] = None
    postalCode: Optional[SensitiveNonEmptyString] = None
    postalCodePlus4: Optional[SensitiveNonEmptyString] = None
    preDirectional: Optional[SensitiveNonEmptyString] = None
    state: Optional[SensitiveNonEmptyString] = None
    streetName: Optional[SensitiveNonEmptyString] = None
    streetNumber: Optional[SensitiveNonEmptyString] = None
    streetSuffix: Optional[SensitiveNonEmptyString] = None


class AppInstance(BaseModel):
    AppInstanceArn: Optional[ChimeArn] = None
    CreatedTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: Optional[NonEmptyResourceName] = None


class AppInstanceStreamingConfiguration(BaseModel):
    AppInstanceDataType_1: AppInstanceDataType = Field(..., alias='AppInstanceDataType')
    ResourceArn: Arn


class AppInstanceStreamingConfigurationList(
    RootModel[List[AppInstanceStreamingConfiguration]]
):
    root: List[AppInstanceStreamingConfiguration] = Field(
        ..., max_length=2, min_length=1
    )


class AppInstanceSummary(BaseModel):
    AppInstanceArn: Optional[ChimeArn] = None
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: Optional[NonEmptyResourceName] = None


class AppInstanceUser(BaseModel):
    AppInstanceUserArn: Optional[ChimeArn] = None
    CreatedTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: Optional[UserName] = None


class AppInstanceUserMembershipSummary(BaseModel):
    ReadMarkerTimestamp: Optional[Timestamp] = None
    Type: Optional[ChannelMembershipType] = None


class AppInstanceUserSummary(BaseModel):
    AppInstanceUserArn: Optional[ChimeArn] = None
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: Optional[UserName] = None


class AssociatePhoneNumberWithUserRequest(BaseModel):
    E164PhoneNumber_1: E164PhoneNumber = Field(..., alias='E164PhoneNumber')


class AssociatePhoneNumbersWithVoiceConnectorGroupRequest(BaseModel):
    E164PhoneNumbers: E164PhoneNumberList
    ForceAssociate: Optional[NullableBoolean] = None


class AssociatePhoneNumbersWithVoiceConnectorRequest(BaseModel):
    E164PhoneNumbers: E164PhoneNumberList
    ForceAssociate: Optional[NullableBoolean] = None


class AssociateSigninDelegateGroupsWithAccountRequest(BaseModel):
    SigninDelegateGroups: SigninDelegateGroupList


class Attendee(BaseModel):
    AttendeeId: Optional[GuidString] = None
    ExternalUserId: Optional[ExternalUserIdType] = None
    JoinToken: Optional[JoinTokenString] = None


class AttendeeIdList(RootModel[List[GuidString]]):
    root: List[GuidString] = Field(..., min_length=1)


class AttendeeList(RootModel[List[Attendee]]):
    root: List[Attendee]


class AttendeeTagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=10, min_length=1)


class AudioArtifactsConfiguration(BaseModel):
    MuxType: AudioMuxType


class BatchCreateChannelMembershipError(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage: Optional[String] = None
    MemberArn: Optional[ChimeArn] = None


class BatchCreateChannelMembershipErrors(
    RootModel[List[BatchCreateChannelMembershipError]]
):
    root: List[BatchCreateChannelMembershipError]


class BatchCreateChannelMembershipRequest(BaseModel):
    MemberArns_1: MemberArns = Field(..., alias='MemberArns')
    Type: Optional[ChannelMembershipType] = None


class BatchSuspendUserRequest(BaseModel):
    UserIdList_1: UserIdList = Field(..., alias='UserIdList')


class BatchSuspendUserResponse(BaseModel):
    UserErrors: Optional[UserErrorList] = None


class BatchUnsuspendUserRequest(BaseModel):
    UserIdList_1: UserIdList = Field(..., alias='UserIdList')


class BatchUnsuspendUserResponse(BaseModel):
    UserErrors: Optional[UserErrorList] = None


class BatchUpdatePhoneNumberRequest(BaseModel):
    UpdatePhoneNumberRequestItems: UpdatePhoneNumberRequestItemList


class BatchUpdateUserResponse(BaseModel):
    UserErrors: Optional[UserErrorList] = None


class Bot(BaseModel):
    BotEmail: Optional[SensitiveString] = None
    BotId: Optional[String] = None
    BotType_1: Optional[BotType] = Field(None, alias='BotType')
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    Disabled: Optional[NullableBoolean] = None
    DisplayName: Optional[SensitiveString] = None
    SecurityToken: Optional[SensitiveString] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None
    UserId: Optional[String] = None


class BotList(RootModel[List[Bot]]):
    root: List[Bot]


class BusinessCallingSettings(BaseModel):
    CdrBucket: Optional[String] = None


class CandidateAddress(BaseModel):
    city: Optional[SensitiveNonEmptyString] = None
    country: Optional[SensitiveNonEmptyString] = None
    postalCode: Optional[SensitiveNonEmptyString] = None
    postalCodePlus4: Optional[SensitiveNonEmptyString] = None
    state: Optional[SensitiveNonEmptyString] = None
    streetInfo: Optional[SensitiveNonEmptyString] = None
    streetNumber: Optional[SensitiveNonEmptyString] = None


class CandidateAddressList(RootModel[List[CandidateAddress]]):
    root: List[CandidateAddress]


class ChannelRetentionSettings(BaseModel):
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')


class ChannelSummary(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    LastMessageTimestamp: Optional[Timestamp] = None
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Mode: Optional[ChannelMode] = None
    Name: Optional[NonEmptyResourceName] = None
    Privacy: Optional[ChannelPrivacy] = None


class ChannelSummaryList(RootModel[List[ChannelSummary]]):
    root: List[ChannelSummary]


class ContentArtifactsConfiguration(BaseModel):
    MuxType: Optional[ContentMuxType] = None
    State: ArtifactsState


class ConversationRetentionSettings(BaseModel):
    RetentionDays_1: Optional[RetentionDays] = Field(None, alias='RetentionDays')


class CreateAccountResponse(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')


class CreateAttendeeError(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    ExternalUserId: Optional[ExternalUserIdType] = None


class CreateAttendeeResponse(BaseModel):
    Attendee_1: Optional[Attendee] = Field(None, alias='Attendee')


class CreateBotRequest(BaseModel):
    DisplayName: SensitiveString
    Domain: Optional[NonEmptyString] = None


class CreateBotResponse(BaseModel):
    Bot_1: Optional[Bot] = Field(None, alias='Bot')


class CreateMeetingDialOutRequest(BaseModel):
    FromPhoneNumber: E164PhoneNumber
    JoinToken: JoinTokenString
    ToPhoneNumber: E164PhoneNumber


class CreateMeetingDialOutResponse(BaseModel):
    TransactionId: Optional[GuidString] = None


class CreatePhoneNumberOrderRequest(BaseModel):
    E164PhoneNumbers: E164PhoneNumberList
    ProductType: PhoneNumberProductType


class CreateProxySessionRequest(BaseModel):
    Capabilities: CapabilityList
    ExpiryMinutes: Optional[PositiveInteger] = None
    GeoMatchLevel_1: Optional[GeoMatchLevel] = Field(None, alias='GeoMatchLevel')
    GeoMatchParams_1: Optional[GeoMatchParams] = Field(None, alias='GeoMatchParams')
    Name: Optional[ProxySessionNameString] = None
    NumberSelectionBehavior_1: Optional[NumberSelectionBehavior] = Field(
        None, alias='NumberSelectionBehavior'
    )
    ParticipantPhoneNumbers: ParticipantPhoneNumberList


class CreateRoomMembershipRequest(BaseModel):
    MemberId: NonEmptyString
    Role: Optional[RoomMembershipRole] = None


class CreateRoomRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: SensitiveString


class CreateSipMediaApplicationCallRequest(BaseModel):
    FromPhoneNumber: E164PhoneNumber
    SipHeaders: Optional[SipHeadersMap] = None
    ToPhoneNumber: E164PhoneNumber


class CreateSipMediaApplicationCallResponse(BaseModel):
    SipMediaApplicationCall_1: Optional[SipMediaApplicationCall] = Field(
        None, alias='SipMediaApplicationCall'
    )


class CreateSipMediaApplicationRequest(BaseModel):
    AwsRegion: String
    Endpoints: SipMediaApplicationEndpointList
    Name: SipMediaApplicationName


class CreateUserRequest(BaseModel):
    Email: Optional[EmailAddress] = None
    UserType_1: Optional[UserType] = Field(None, alias='UserType')
    Username: Optional[String] = None


class CreateVoiceConnectorRequest(BaseModel):
    AwsRegion: Optional[VoiceConnectorAwsRegion] = None
    Name: VoiceConnectorName
    RequireEncryption: Boolean


class Credential(BaseModel):
    Password: Optional[SensitiveString] = None
    Username: Optional[SensitiveString] = None


class CredentialList(RootModel[List[Credential]]):
    root: List[Credential]


class DNISEmergencyCallingConfiguration(BaseModel):
    CallingCountry: Alpha2CountryCode
    EmergencyPhoneNumber: E164PhoneNumber
    TestPhoneNumber: Optional[E164PhoneNumber] = None


class DNISEmergencyCallingConfigurationList(
    RootModel[List[DNISEmergencyCallingConfiguration]]
):
    root: List[DNISEmergencyCallingConfiguration]


class DeleteVoiceConnectorTerminationCredentialsRequest(BaseModel):
    Usernames: SensitiveStringList


class DescribeAppInstanceResponse(BaseModel):
    AppInstance_1: Optional[AppInstance] = Field(None, alias='AppInstance')


class DescribeAppInstanceUserResponse(BaseModel):
    AppInstanceUser_1: Optional[AppInstanceUser] = Field(None, alias='AppInstanceUser')


class DisassociatePhoneNumbersFromVoiceConnectorGroupRequest(BaseModel):
    E164PhoneNumbers: E164PhoneNumberList


class DisassociatePhoneNumbersFromVoiceConnectorRequest(BaseModel):
    E164PhoneNumbers: E164PhoneNumberList


class EmergencyCallingConfiguration(BaseModel):
    DNIS: Optional[DNISEmergencyCallingConfigurationList] = None


class EngineTranscribeMedicalSettings(BaseModel):
    ContentIdentificationType: Optional[TranscribeMedicalContentIdentificationType] = (
        None
    )
    LanguageCode: TranscribeMedicalLanguageCode
    Region: Optional[TranscribeMedicalRegion] = None
    Specialty: TranscribeMedicalSpecialty
    Type: TranscribeMedicalType
    VocabularyName: Optional[String] = None


class EngineTranscribeSettings(BaseModel):
    ContentIdentificationType: Optional[TranscribeContentIdentificationType] = None
    ContentRedactionType: Optional[TranscribeContentRedactionType] = None
    EnablePartialResultsStabilization: Optional[Boolean] = None
    IdentifyLanguage: Optional[Boolean] = None
    LanguageCode: Optional[TranscribeLanguageCode] = None
    LanguageModelName: Optional[TranscribeLanguageModelName] = None
    LanguageOptions: Optional[TranscribeLanguageOptions] = None
    PartialResultsStability: Optional[TranscribePartialResultsStability] = None
    PiiEntityTypes: Optional[TranscribePiiEntityTypes] = None
    PreferredLanguage: Optional[TranscribeLanguageCode] = None
    Region: Optional[TranscribeRegion] = None
    VocabularyFilterMethod: Optional[TranscribeVocabularyFilterMethod] = None
    VocabularyFilterName: Optional[String] = None
    VocabularyFilterNames: Optional[TranscribeVocabularyNamesOrFilterNamesString] = None
    VocabularyName: Optional[String] = None
    VocabularyNames: Optional[TranscribeVocabularyNamesOrFilterNamesString] = None


class EventsConfiguration(BaseModel):
    BotId: Optional[String] = None
    LambdaFunctionArn: Optional[SensitiveString] = None
    OutboundEventsHTTPSEndpoint: Optional[SensitiveString] = None


class ExternalUserIdList(RootModel[List[ExternalUserIdType]]):
    root: List[ExternalUserIdType] = Field(..., min_length=1)


class GetAccountResponse(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')


class GetAccountSettingsResponse(BaseModel):
    AccountSettings_1: Optional[AccountSettings] = Field(None, alias='AccountSettings')


class GetAppInstanceStreamingConfigurationsResponse(BaseModel):
    AppInstanceStreamingConfigurations: Optional[
        AppInstanceStreamingConfigurationList
    ] = None


class GetAttendeeResponse(BaseModel):
    Attendee_1: Optional[Attendee] = Field(None, alias='Attendee')


class GetBotResponse(BaseModel):
    Bot_1: Optional[Bot] = Field(None, alias='Bot')


class GetEventsConfigurationResponse(BaseModel):
    EventsConfiguration_1: Optional[EventsConfiguration] = Field(
        None, alias='EventsConfiguration'
    )


class GetGlobalSettingsResponse(BaseModel):
    BusinessCalling: Optional[BusinessCallingSettings] = None
    VoiceConnector: Optional[VoiceConnectorSettings] = None


class GetPhoneNumberSettingsResponse(BaseModel):
    CallingName_1: Optional[CallingName] = Field(None, alias='CallingName')
    CallingNameUpdatedTimestamp: Optional[Iso8601Timestamp] = None


class GetSipMediaApplicationLoggingConfigurationResponse(BaseModel):
    SipMediaApplicationLoggingConfiguration_1: Optional[
        SipMediaApplicationLoggingConfiguration
    ] = Field(None, alias='SipMediaApplicationLoggingConfiguration')


class GetUserSettingsResponse(BaseModel):
    UserSettings_1: Optional[UserSettings] = Field(None, alias='UserSettings')


class GetVoiceConnectorEmergencyCallingConfigurationResponse(BaseModel):
    EmergencyCallingConfiguration_1: Optional[EmergencyCallingConfiguration] = Field(
        None, alias='EmergencyCallingConfiguration'
    )


class GetVoiceConnectorLoggingConfigurationResponse(BaseModel):
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class GetVoiceConnectorTerminationHealthResponse(BaseModel):
    TerminationHealth_1: Optional[TerminationHealth] = Field(
        None, alias='TerminationHealth'
    )


class GetVoiceConnectorTerminationResponse(BaseModel):
    Termination_1: Optional[Termination] = Field(None, alias='Termination')


class Identity(BaseModel):
    Arn: Optional[ChimeArn] = None
    Name: Optional[ResourceName] = None


class Invite(BaseModel):
    EmailAddress_1: Optional[EmailAddress] = Field(None, alias='EmailAddress')
    EmailStatus_1: Optional[EmailStatus] = Field(None, alias='EmailStatus')
    InviteId: Optional[String] = None
    Status: Optional[InviteStatus] = None


class InviteList(RootModel[List[Invite]]):
    root: List[Invite]


class InviteUsersRequest(BaseModel):
    UserEmailList_1: UserEmailList = Field(..., alias='UserEmailList')
    UserType_1: Optional[UserType] = Field(None, alias='UserType')


class InviteUsersResponse(BaseModel):
    Invites: Optional[InviteList] = None


class ListAccountsResponse(BaseModel):
    Accounts: Optional[AccountList] = None
    NextToken: Optional[String] = None


class ListAttendeesResponse(BaseModel):
    Attendees: Optional[AttendeeList] = None
    NextToken: Optional[String] = None


class ListBotsResponse(BaseModel):
    Bots: Optional[BotList] = None
    NextToken: Optional[String] = None


class ListChannelsResponse(BaseModel):
    Channels: Optional[ChannelSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListVoiceConnectorTerminationCredentialsResponse(BaseModel):
    Usernames: Optional[SensitiveStringList] = None


class MediaPlacement(BaseModel):
    AudioFallbackUrl: Optional[UriType] = None
    AudioHostUrl: Optional[UriType] = None
    EventIngestionUrl: Optional[UriType] = None
    ScreenDataUrl: Optional[UriType] = None
    ScreenSharingUrl: Optional[UriType] = None
    ScreenViewingUrl: Optional[UriType] = None
    SignalingUrl: Optional[UriType] = None
    TurnControlUrl: Optional[UriType] = None


class Meeting(BaseModel):
    ExternalMeetingId: Optional[ExternalMeetingIdType] = None
    MediaPlacement_1: Optional[MediaPlacement] = Field(None, alias='MediaPlacement')
    MediaRegion: Optional[String] = None
    MeetingId: Optional[GuidString] = None


class MeetingList(RootModel[List[Meeting]]):
    root: List[Meeting]


class MeetingTagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class Member(BaseModel):
    AccountId: Optional[NonEmptyString] = None
    Email: Optional[SensitiveString] = None
    FullName: Optional[SensitiveString] = None
    MemberId: Optional[NonEmptyString] = None
    MemberType_1: Optional[MemberType] = Field(None, alias='MemberType')


class MemberError(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage: Optional[String] = None
    MemberId: Optional[NonEmptyString] = None


class MemberErrorList(RootModel[List[MemberError]]):
    root: List[MemberError]


class Members(RootModel[List[Identity]]):
    root: List[Identity]


class MembershipItem(BaseModel):
    MemberId: Optional[NonEmptyString] = None
    Role: Optional[RoomMembershipRole] = None


class MembershipItemList(RootModel[List[MembershipItem]]):
    root: List[MembershipItem] = Field(..., max_length=50)


class MessagingSessionEndpoint(BaseModel):
    Url: Optional[UrlType] = None


class NonEmptyStringList(RootModel[List[String]]):
    root: List[String] = Field(..., min_length=1)


class OrderedPhoneNumber(BaseModel):
    E164PhoneNumber_1: Optional[E164PhoneNumber] = Field(None, alias='E164PhoneNumber')
    Status: Optional[OrderedPhoneNumberStatus] = None


class OrderedPhoneNumberList(RootModel[List[OrderedPhoneNumber]]):
    root: List[OrderedPhoneNumber]


class OriginationRoute(BaseModel):
    Host: Optional[String] = None
    Port_1: Optional[Port] = Field(None, alias='Port')
    Priority: Optional[OriginationRoutePriority] = None
    Protocol: Optional[OriginationRouteProtocol] = None
    Weight: Optional[OriginationRouteWeight] = None


class OriginationRouteList(RootModel[List[OriginationRoute]]):
    root: List[OriginationRoute]


class PhoneNumberAssociation(BaseModel):
    AssociatedTimestamp: Optional[Iso8601Timestamp] = None
    Name: Optional[PhoneNumberAssociationName] = None
    Value: Optional[String] = None


class PhoneNumberAssociationList(RootModel[List[PhoneNumberAssociation]]):
    root: List[PhoneNumberAssociation]


class PhoneNumberCountry(BaseModel):
    CountryCode: Optional[Alpha2CountryCode] = None
    SupportedPhoneNumberTypes: Optional[PhoneNumberTypeList] = None


class PhoneNumberError(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage: Optional[String] = None
    PhoneNumberId: Optional[NonEmptyString] = None


class PhoneNumberErrorList(RootModel[List[PhoneNumberError]]):
    root: List[PhoneNumberError]


class PhoneNumberOrder(BaseModel):
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    OrderedPhoneNumbers: Optional[OrderedPhoneNumberList] = None
    PhoneNumberOrderId: Optional[GuidString] = None
    ProductType: Optional[PhoneNumberProductType] = None
    Status: Optional[PhoneNumberOrderStatus] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class PhoneNumberOrderList(RootModel[List[PhoneNumberOrder]]):
    root: List[PhoneNumberOrder]


class Proxy(BaseModel):
    DefaultSessionExpiryMinutes: Optional[Integer] = None
    Disabled: Optional[Boolean] = None
    FallBackPhoneNumber: Optional[E164PhoneNumber] = None
    PhoneNumberCountries: Optional[StringList] = None


class ProxySession(BaseModel):
    Capabilities: Optional[CapabilityList] = None
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    EndedTimestamp: Optional[Iso8601Timestamp] = None
    ExpiryMinutes: Optional[PositiveInteger] = None
    GeoMatchLevel_1: Optional[GeoMatchLevel] = Field(None, alias='GeoMatchLevel')
    GeoMatchParams_1: Optional[GeoMatchParams] = Field(None, alias='GeoMatchParams')
    Name: Optional[String128] = None
    NumberSelectionBehavior_1: Optional[NumberSelectionBehavior] = Field(
        None, alias='NumberSelectionBehavior'
    )
    Participants_1: Optional[Participants] = Field(None, alias='Participants')
    ProxySessionId: Optional[NonEmptyString128] = None
    Status: Optional[ProxySessionStatus] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None
    VoiceConnectorId: Optional[NonEmptyString128] = None


class ProxySessions(RootModel[List[ProxySession]]):
    root: List[ProxySession]


class PutAppInstanceStreamingConfigurationsRequest(BaseModel):
    AppInstanceStreamingConfigurations: AppInstanceStreamingConfigurationList


class PutAppInstanceStreamingConfigurationsResponse(BaseModel):
    AppInstanceStreamingConfigurations: Optional[
        AppInstanceStreamingConfigurationList
    ] = None


class PutEventsConfigurationRequest(BaseModel):
    LambdaFunctionArn: Optional[SensitiveString] = None
    OutboundEventsHTTPSEndpoint: Optional[SensitiveString] = None


class PutEventsConfigurationResponse(BaseModel):
    EventsConfiguration_1: Optional[EventsConfiguration] = Field(
        None, alias='EventsConfiguration'
    )


class PutSipMediaApplicationLoggingConfigurationRequest(BaseModel):
    SipMediaApplicationLoggingConfiguration_1: Optional[
        SipMediaApplicationLoggingConfiguration
    ] = Field(None, alias='SipMediaApplicationLoggingConfiguration')


class PutSipMediaApplicationLoggingConfigurationResponse(BaseModel):
    SipMediaApplicationLoggingConfiguration_1: Optional[
        SipMediaApplicationLoggingConfiguration
    ] = Field(None, alias='SipMediaApplicationLoggingConfiguration')


class PutVoiceConnectorEmergencyCallingConfigurationRequest(BaseModel):
    EmergencyCallingConfiguration_1: EmergencyCallingConfiguration = Field(
        ..., alias='EmergencyCallingConfiguration'
    )


class PutVoiceConnectorEmergencyCallingConfigurationResponse(BaseModel):
    EmergencyCallingConfiguration_1: Optional[EmergencyCallingConfiguration] = Field(
        None, alias='EmergencyCallingConfiguration'
    )


class PutVoiceConnectorProxyResponse(BaseModel):
    Proxy_1: Optional[Proxy] = Field(None, alias='Proxy')


class PutVoiceConnectorTerminationCredentialsRequest(BaseModel):
    Credentials: Optional[CredentialList] = None


class PutVoiceConnectorTerminationRequest(BaseModel):
    Termination_1: Termination = Field(..., alias='Termination')


class PutVoiceConnectorTerminationResponse(BaseModel):
    Termination_1: Optional[Termination] = Field(None, alias='Termination')


class RegenerateSecurityTokenResponse(BaseModel):
    Bot_1: Optional[Bot] = Field(None, alias='Bot')


class RetentionSettings(BaseModel):
    ConversationRetentionSettings_1: Optional[ConversationRetentionSettings] = Field(
        None, alias='ConversationRetentionSettings'
    )
    RoomRetentionSettings_1: Optional[RoomRetentionSettings] = Field(
        None, alias='RoomRetentionSettings'
    )


class Room(BaseModel):
    AccountId: Optional[NonEmptyString] = None
    CreatedBy: Optional[NonEmptyString] = None
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    Name: Optional[SensitiveString] = None
    RoomId: Optional[NonEmptyString] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class RoomList(RootModel[List[Room]]):
    root: List[Room]


class RoomMembership(BaseModel):
    InvitedBy: Optional[NonEmptyString] = None
    Member_1: Optional[Member] = Field(None, alias='Member')
    Role: Optional[RoomMembershipRole] = None
    RoomId: Optional[NonEmptyString] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class RoomMembershipList(RootModel[List[RoomMembership]]):
    root: List[RoomMembership]


class SMAUpdateCallArgumentsMap(RootModel[Optional[Dict[str, SensitiveString]]]):
    root: Optional[Dict[str, SensitiveString]] = None


class SearchAvailablePhoneNumbersResponse(BaseModel):
    E164PhoneNumbers: Optional[E164PhoneNumberList] = None
    NextToken: Optional[String] = None


class SelectedVideoStreams(BaseModel):
    AttendeeIds: Optional[AttendeeIdList] = None
    ExternalUserIds: Optional[ExternalUserIdList] = None


class SipMediaApplication(BaseModel):
    AwsRegion: Optional[String] = None
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    Endpoints: Optional[SipMediaApplicationEndpointList] = None
    Name: Optional[SipMediaApplicationName] = None
    SipMediaApplicationId: Optional[NonEmptyString] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class SipMediaApplicationList(RootModel[List[SipMediaApplication]]):
    root: List[SipMediaApplication]


class SipRuleTargetApplication(BaseModel):
    AwsRegion: Optional[String] = None
    Priority: Optional[SipApplicationPriority] = None
    SipMediaApplicationId: Optional[NonEmptyString] = None


class SipRuleTargetApplicationList(RootModel[List[SipRuleTargetApplication]]):
    root: List[SipRuleTargetApplication] = Field(..., max_length=25, min_length=1)


class SourceConfiguration(BaseModel):
    SelectedVideoStreams_1: Optional[SelectedVideoStreams] = Field(
        None, alias='SelectedVideoStreams'
    )


class StreamingConfiguration(BaseModel):
    DataRetentionInHours_1: DataRetentionInHours = Field(
        ..., alias='DataRetentionInHours'
    )
    Disabled: Optional[Boolean] = None
    StreamingNotificationTargets: Optional[StreamingNotificationTargetList] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class TagResourceRequest(BaseModel):
    ResourceARN: Arn
    Tags: TagList


class TranscriptionConfiguration(BaseModel):
    EngineTranscribeMedicalSettings_1: Optional[EngineTranscribeMedicalSettings] = (
        Field(None, alias='EngineTranscribeMedicalSettings')
    )
    EngineTranscribeSettings_1: Optional[EngineTranscribeSettings] = Field(
        None, alias='EngineTranscribeSettings'
    )


class UntagAttendeeRequest(BaseModel):
    TagKeys: AttendeeTagKeyList


class UntagMeetingRequest(BaseModel):
    TagKeys: MeetingTagKeyList


class UpdateAccountResponse(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')


class UpdateAccountSettingsRequest(BaseModel):
    AccountSettings_1: AccountSettings = Field(..., alias='AccountSettings')


class UpdateAppInstanceUserRequest(BaseModel):
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: UserName


class UpdateBotResponse(BaseModel):
    Bot_1: Optional[Bot] = Field(None, alias='Bot')


class UpdateGlobalSettingsRequest(BaseModel):
    BusinessCalling: Optional[BusinessCallingSettings] = None
    VoiceConnector: Optional[VoiceConnectorSettings] = None


class UpdateProxySessionResponse(BaseModel):
    ProxySession_1: Optional[ProxySession] = Field(None, alias='ProxySession')


class UpdateRoomMembershipResponse(BaseModel):
    RoomMembership_1: Optional[RoomMembership] = Field(None, alias='RoomMembership')


class UpdateRoomResponse(BaseModel):
    Room_1: Optional[Room] = Field(None, alias='Room')


class UpdateSipMediaApplicationCallRequest(BaseModel):
    Arguments: SMAUpdateCallArgumentsMap


class UpdateSipMediaApplicationResponse(BaseModel):
    SipMediaApplication_1: Optional[SipMediaApplication] = Field(
        None, alias='SipMediaApplication'
    )


class UpdateSipRuleRequest(BaseModel):
    Disabled: Optional[NullableBoolean] = None
    Name: SipRuleName
    TargetApplications: Optional[SipRuleTargetApplicationList] = None


class UpdateUserRequest(BaseModel):
    AlexaForBusinessMetadata_1: Optional[AlexaForBusinessMetadata] = Field(
        None, alias='AlexaForBusinessMetadata'
    )
    LicenseType: Optional[License] = None
    UserType_1: Optional[UserType] = Field(None, alias='UserType')


class UpdateUserRequestItem(BaseModel):
    AlexaForBusinessMetadata_1: Optional[AlexaForBusinessMetadata] = Field(
        None, alias='AlexaForBusinessMetadata'
    )
    LicenseType: Optional[License] = None
    UserId: NonEmptyString
    UserType_1: Optional[UserType] = Field(None, alias='UserType')


class UpdateUserRequestItemList(RootModel[List[UpdateUserRequestItem]]):
    root: List[UpdateUserRequestItem] = Field(..., max_length=20)


class UpdateUserSettingsRequest(BaseModel):
    UserSettings_1: UserSettings = Field(..., alias='UserSettings')


class UpdateVoiceConnectorRequest(BaseModel):
    Name: VoiceConnectorName
    RequireEncryption: Boolean


class User(BaseModel):
    AccountId: Optional[String] = None
    AlexaForBusinessMetadata_1: Optional[AlexaForBusinessMetadata] = Field(
        None, alias='AlexaForBusinessMetadata'
    )
    DisplayName: Optional[SensitiveString] = None
    InvitedOn: Optional[Iso8601Timestamp] = None
    LicenseType: Optional[License] = None
    PersonalPIN: Optional[String] = None
    PrimaryEmail: Optional[EmailAddress] = None
    PrimaryProvisionedNumber: Optional[SensitiveString] = None
    RegisteredOn: Optional[Iso8601Timestamp] = None
    UserId: String
    UserInvitationStatus: Optional[InviteStatus] = None
    UserRegistrationStatus: Optional[RegistrationStatus] = None
    UserType_1: Optional[UserType] = Field(None, alias='UserType')


class UserList(RootModel[List[User]]):
    root: List[User]


class ValidateE911AddressResponse(BaseModel):
    Address_1: Optional[Address] = Field(None, alias='Address')
    AddressExternalId: Optional[String] = None
    CandidateAddressList_1: Optional[CandidateAddressList] = Field(
        None, alias='CandidateAddressList'
    )
    ValidationResult_1: Optional[ValidationResult] = Field(
        None, alias='ValidationResult'
    )


class VideoArtifactsConfiguration(BaseModel):
    MuxType: Optional[VideoMuxType] = None
    State: ArtifactsState


class VoiceConnector(BaseModel):
    AwsRegion: Optional[VoiceConnectorAwsRegion] = None
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    Name: Optional[VoiceConnectorName] = None
    OutboundHostName: Optional[String] = None
    RequireEncryption: Optional[Boolean] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None
    VoiceConnectorArn: Optional[NonEmptyString] = None
    VoiceConnectorId: Optional[NonEmptyString] = None


class VoiceConnectorItem(BaseModel):
    Priority: VoiceConnectorItemPriority
    VoiceConnectorId: NonEmptyString


class VoiceConnectorItemList(RootModel[List[VoiceConnectorItem]]):
    root: List[VoiceConnectorItem]


class VoiceConnectorList(RootModel[List[VoiceConnector]]):
    root: List[VoiceConnector]


class AccountsAccountIdRetentionSettingsPutRequest(BaseModel):
    RetentionSettings_1: RetentionSettings = Field(
        ...,
        alias='RetentionSettings',
        description='The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat-room messages and chat-conversation messages.',
    )


class AccountsAccountIdRoomsRoomIdMembershipsOperationBatchCreatePostRequest(BaseModel):
    MembershipItemList: List[MembershipItem] = Field(
        ..., description='The list of membership items.', max_length=50
    )


class AccountsAccountIdUsersPostRequest(BaseModel):
    UpdateUserRequestItems: List[UpdateUserRequestItem] = Field(
        ...,
        description='The request containing the user IDs and details to update.',
        max_length=20,
    )


class AppInstanceUsersPostRequest(BaseModel):
    AppInstanceArn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Field(..., description='The ARN of the <code>AppInstance</code> request.')
    AppInstanceUserId: SecretStr = Field(
        ..., description='The user ID of the <code>AppInstance</code>.'
    )
    ClientRequestToken: SecretStr = Field(
        ...,
        description='The token assigned to the user requesting an <code>AppInstance</code>.',
    )
    Metadata: Optional[SecretStr] = Field(
        None, description="The request's metadata. Limited to a 1KB string in UTF-8."
    )
    Name: SecretStr = Field(..., description="The user's name.")
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Tags assigned to the <code>AppInstanceUser</code>.',
        max_length=50,
        min_length=1,
    )


class AppInstancesPostRequest(BaseModel):
    ClientRequestToken: SecretStr = Field(
        ...,
        description='The <code>ClientRequestToken</code> of the <code>AppInstance</code>.',
    )
    Metadata: Optional[SecretStr] = Field(
        None,
        description='The metadata of the <code>AppInstance</code>. Limited to a 1KB string in UTF-8.',
    )
    Name: SecretStr = Field(
        ..., description='The name of the <code>AppInstance</code>.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Tags assigned to the <code>AppInstance</code>.',
        max_length=50,
        min_length=1,
    )


class AppInstanceRetentionSettings(BaseModel):
    ChannelRetentionSettings_1: Optional[ChannelRetentionSettings] = Field(
        None, alias='ChannelRetentionSettings'
    )


class AppInstancesAppInstanceArnRetentionSettingsPutRequest(BaseModel):
    AppInstanceRetentionSettings_1: AppInstanceRetentionSettings = Field(
        ...,
        alias='AppInstanceRetentionSettings',
        description='The details of the data-retention settings for an <code>AppInstance</code>.',
    )


class AppInstancesAppInstanceArnStreamingConfigurationsPutRequest(BaseModel):
    AppInstanceStreamingConfigurations: List[AppInstanceStreamingConfiguration] = Field(
        ...,
        description='The streaming configurations set for an <code>AppInstance</code>.',
        max_length=2,
        min_length=1,
    )


class ChannelsPostRequest(BaseModel):
    AppInstanceArn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Field(..., description='The ARN of the channel request.')
    ClientRequestToken: SecretStr = Field(
        ...,
        description='The client token for the request. An <code>Idempotency</code> token.',
    )
    Metadata: Optional[SecretStr] = Field(
        None,
        description='The metadata of the creation request. Limited to 1KB and UTF-8.',
    )
    Mode_1: Optional[Mode] = Field(
        None,
        alias='Mode',
        description='The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.',
    )
    Name: SecretStr = Field(..., description='The name of the channel.')
    Privacy_1: Optional[Privacy] = Field(
        None,
        alias='Privacy',
        description="The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.",
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tags for the creation request.',
        max_length=50,
        min_length=1,
    )


class MeetingsPostRequest(BaseModel):
    ClientRequestToken: SecretStr = Field(
        ...,
        description='The unique identifier for the client request. Use a different token for different meetings.',
    )
    ExternalMeetingId: Optional[SecretStr] = Field(
        None, description='The external meeting ID.'
    )
    MediaRegion: Optional[str] = Field(
        None,
        description='<p> The Region in which to create the meeting. Default: <code>us-east-1</code>. </p> <p> Available values: <code>af-south-1</code> , <code>ap-northeast-1</code> , <code>ap-northeast-2</code> , <code>ap-south-1</code> , <code>ap-southeast-1</code> , <code>ap-southeast-2</code> , <code>ca-central-1</code> , <code>eu-central-1</code> , <code>eu-north-1</code> , <code>eu-south-1</code> , <code>eu-west-1</code> , <code>eu-west-2</code> , <code>eu-west-3</code> , <code>sa-east-1</code> , <code>us-east-1</code> , <code>us-east-2</code> , <code>us-west-1</code> , <code>us-west-2</code> . </p>',
    )
    MeetingHostId: Optional[SecretStr] = Field(None, description='Reserved.')
    NotificationsConfiguration_1: Optional[NotificationsConfiguration] = Field(
        None,
        alias='NotificationsConfiguration',
        description=' The resource target configurations for receiving Amazon Chime SDK meeting and attendee event notifications. The Amazon Chime SDK supports resource targets located in the US East (N. Virginia) AWS Region (<code>us-east-1</code>). ',
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tag key-value pairs.', max_length=50, min_length=1
    )


class MeetingsMeetingIdAttendeesPostRequest(BaseModel):
    ExternalUserId: SecretStr = Field(
        ...,
        description='The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.',
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tag key-value pairs.', max_length=10, min_length=1
    )


class MeetingsMeetingIdAttendeesAttendeeIdTagsOperationAddPostRequest(BaseModel):
    Tags: List[Tag] = Field(
        ..., description='The tag key-value pairs.', max_length=10, min_length=1
    )


class MeetingsMeetingIdTagsOperationAddPostRequest(BaseModel):
    Tags: List[Tag] = Field(
        ..., description='The tag key-value pairs.', max_length=50, min_length=1
    )


class MeetingsMeetingIdTranscriptionOperationStartPostRequest(BaseModel):
    TranscriptionConfiguration_1: TranscriptionConfiguration = Field(
        ...,
        alias='TranscriptionConfiguration',
        description='The configuration for the current transcription operation. Must contain <code>EngineTranscribeSettings</code> or <code>EngineTranscribeMedicalSettings</code>.',
    )


class SipRulesPostRequest(BaseModel):
    Disabled: Optional[bool] = Field(
        None,
        description='Enables or disables a rule. You must disable rules before you can delete them.',
    )
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the SIP rule.'
    )
    TargetApplications: List[SipRuleTargetApplication] = Field(
        ...,
        description='List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.',
        max_length=25,
        min_length=1,
    )
    TriggerType_1: TriggerType = Field(
        ...,
        alias='TriggerType',
        description='The type of trigger assigned to the SIP rule in <code>TriggerValue</code>, currently <code>RequestUriHostname</code> or <code>ToPhoneNumber</code>.',
    )
    TriggerValue: constr(pattern=r'.*\S.*') = Field(
        ...,
        description='If <code>TriggerType</code> is <code>RequestUriHostname</code>, the value can be the outbound host name of an Amazon Chime Voice Connector. If <code>TriggerType</code> is <code>ToPhoneNumber</code>, the value can be a customer-owned phone number in the E164 format. The <code>SipMediaApplication</code> specified in the <code>SipRule</code> is triggered if the request URI in an incoming SIP request matches the <code>RequestUriHostname</code>, or if the <code>To</code> header in the incoming SIP request matches the <code>ToPhoneNumber</code> value.',
    )


class SipRulesSipRuleIdPutRequest(BaseModel):
    Disabled: Optional[bool] = Field(
        None,
        description='The new value specified to indicate whether the rule is disabled.',
    )
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The new name for the specified SIP rule.'
    )
    TargetApplications: Optional[List[SipRuleTargetApplication]] = Field(
        None,
        description='The new value of the list of target applications.',
        max_length=25,
        min_length=1,
    )


class TagsOperationTagResourcePostRequest(BaseModel):
    ResourceARN: SecretStr = Field(..., description='The resource ARN.')
    Tags: List[Tag] = Field(
        ..., description='The tag key-value pairs.', max_length=50, min_length=1
    )


class VoiceConnectorGroupsPostRequest(BaseModel):
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the Amazon Chime Voice Connector group.'
    )
    VoiceConnectorItems: Optional[List[VoiceConnectorItem]] = Field(
        None, description='The Amazon Chime Voice Connectors to route inbound calls to.'
    )


class VoiceConnectorGroupsVoiceConnectorGroupIdPutRequest(BaseModel):
    Name: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the Amazon Chime Voice Connector group.'
    )
    VoiceConnectorItems: List[VoiceConnectorItem] = Field(
        ...,
        description='The <code>VoiceConnectorItems</code> to associate with the group.',
    )


class VoiceConnectorsVoiceConnectorIdEmergencyCallingConfigurationPutRequest(BaseModel):
    EmergencyCallingConfiguration_1: EmergencyCallingConfiguration = Field(
        ...,
        alias='EmergencyCallingConfiguration',
        description='The emergency calling configuration details associated with an Amazon Chime Voice Connector.',
    )


class Origination(BaseModel):
    Disabled: Optional[Boolean] = None
    Routes: Optional[OriginationRouteList] = None


class VoiceConnectorsVoiceConnectorIdOriginationPutRequest(BaseModel):
    Origination_1: Origination = Field(
        ...,
        alias='Origination',
        description='<p>Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector.</p> <note> <p>The parameters listed below are not required, but you must use at least one. </p> </note>',
    )


class VoiceConnectorsVoiceConnectorIdTerminationCredentialsOperationPutPostRequest(
    BaseModel
):
    Credentials: Optional[List[Credential]] = Field(
        None, description='The termination SIP credentials.'
    )


class AppInstanceAdmin(BaseModel):
    Admin: Optional[Identity] = None
    AppInstanceArn: Optional[ChimeArn] = None
    CreatedTimestamp: Optional[Timestamp] = None


class AppInstanceAdminSummary(BaseModel):
    Admin: Optional[Identity] = None


class AppInstanceList(RootModel[List[AppInstanceSummary]]):
    root: List[AppInstanceSummary]


class AppInstanceUserList(RootModel[List[AppInstanceUserSummary]]):
    root: List[AppInstanceUserSummary]


class ArtifactsConfiguration(BaseModel):
    Audio: AudioArtifactsConfiguration
    Content: ContentArtifactsConfiguration
    Video: VideoArtifactsConfiguration


class AssociatePhoneNumbersWithVoiceConnectorGroupResponse(BaseModel):
    PhoneNumberErrors: Optional[PhoneNumberErrorList] = None


class AssociatePhoneNumbersWithVoiceConnectorResponse(BaseModel):
    PhoneNumberErrors: Optional[PhoneNumberErrorList] = None


class AttendeeTagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=10, min_length=1)


class BatchChannelMemberships(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    InvitedBy: Optional[Identity] = None
    Members_1: Optional[Members] = Field(None, alias='Members')
    Type: Optional[ChannelMembershipType] = None


class BatchCreateAttendeeErrorList(RootModel[List[CreateAttendeeError]]):
    root: List[CreateAttendeeError]


class BatchCreateAttendeeResponse(BaseModel):
    Attendees: Optional[AttendeeList] = None
    Errors: Optional[BatchCreateAttendeeErrorList] = None


class BatchCreateChannelMembershipResponse(BaseModel):
    BatchChannelMemberships_1: Optional[BatchChannelMemberships] = Field(
        None, alias='BatchChannelMemberships'
    )
    Errors: Optional[BatchCreateChannelMembershipErrors] = None


class BatchCreateRoomMembershipRequest(BaseModel):
    MembershipItemList_1: MembershipItemList = Field(..., alias='MembershipItemList')


class BatchCreateRoomMembershipResponse(BaseModel):
    Errors: Optional[MemberErrorList] = None


class BatchDeletePhoneNumberRequest(BaseModel):
    PhoneNumberIds: NonEmptyStringList


class BatchDeletePhoneNumberResponse(BaseModel):
    PhoneNumberErrors: Optional[PhoneNumberErrorList] = None


class BatchUpdatePhoneNumberResponse(BaseModel):
    PhoneNumberErrors: Optional[PhoneNumberErrorList] = None


class BatchUpdateUserRequest(BaseModel):
    UpdateUserRequestItems: UpdateUserRequestItemList


class Channel(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    CreatedBy: Optional[Identity] = None
    CreatedTimestamp: Optional[Timestamp] = None
    LastMessageTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Mode: Optional[ChannelMode] = None
    Name: Optional[NonEmptyResourceName] = None
    Privacy: Optional[ChannelPrivacy] = None


class ChannelBan(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    CreatedBy: Optional[Identity] = None
    CreatedTimestamp: Optional[Timestamp] = None
    Member: Optional[Identity] = None


class ChannelBanSummary(BaseModel):
    Member: Optional[Identity] = None


class ChannelBanSummaryList(RootModel[List[ChannelBanSummary]]):
    root: List[ChannelBanSummary]


class ChannelMembership(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    CreatedTimestamp: Optional[Timestamp] = None
    InvitedBy: Optional[Identity] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    Member: Optional[Identity] = None
    Type: Optional[ChannelMembershipType] = None


class ChannelMembershipForAppInstanceUserSummary(BaseModel):
    AppInstanceUserMembershipSummary_1: Optional[AppInstanceUserMembershipSummary] = (
        Field(None, alias='AppInstanceUserMembershipSummary')
    )
    ChannelSummary_1: Optional[ChannelSummary] = Field(None, alias='ChannelSummary')


class ChannelMembershipForAppInstanceUserSummaryList(
    RootModel[List[ChannelMembershipForAppInstanceUserSummary]]
):
    root: List[ChannelMembershipForAppInstanceUserSummary]


class ChannelMembershipSummary(BaseModel):
    Member: Optional[Identity] = None


class ChannelMembershipSummaryList(RootModel[List[ChannelMembershipSummary]]):
    root: List[ChannelMembershipSummary]


class ChannelMessage(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    Content_1: Optional[Content] = Field(None, alias='Content')
    CreatedTimestamp: Optional[Timestamp] = None
    LastEditedTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Persistence: Optional[ChannelMessagePersistenceType] = None
    Redacted: Optional[NonNullableBoolean] = None
    Sender: Optional[Identity] = None
    Type: Optional[ChannelMessageType] = None


class ChannelMessageSummary(BaseModel):
    Content_1: Optional[Content] = Field(None, alias='Content')
    CreatedTimestamp: Optional[Timestamp] = None
    LastEditedTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Redacted: Optional[NonNullableBoolean] = None
    Sender: Optional[Identity] = None
    Type: Optional[ChannelMessageType] = None


class ChannelMessageSummaryList(RootModel[List[ChannelMessageSummary]]):
    root: List[ChannelMessageSummary]


class ChannelModeratedByAppInstanceUserSummary(BaseModel):
    ChannelSummary_1: Optional[ChannelSummary] = Field(None, alias='ChannelSummary')


class ChannelModeratedByAppInstanceUserSummaryList(
    RootModel[List[ChannelModeratedByAppInstanceUserSummary]]
):
    root: List[ChannelModeratedByAppInstanceUserSummary]


class ChannelModerator(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    CreatedBy: Optional[Identity] = None
    CreatedTimestamp: Optional[Timestamp] = None
    Moderator: Optional[Identity] = None


class ChannelModeratorSummary(BaseModel):
    Moderator: Optional[Identity] = None


class ChannelModeratorSummaryList(RootModel[List[ChannelModeratorSummary]]):
    root: List[ChannelModeratorSummary]


class ChimeSdkMeetingConfiguration(BaseModel):
    ArtifactsConfiguration_1: Optional[ArtifactsConfiguration] = Field(
        None, alias='ArtifactsConfiguration'
    )
    SourceConfiguration_1: Optional[SourceConfiguration] = Field(
        None, alias='SourceConfiguration'
    )


class CreateAppInstanceAdminResponse(BaseModel):
    AppInstanceAdmin: Optional[Identity] = None
    AppInstanceArn: Optional[ChimeArn] = None


class CreateAppInstanceRequest(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: NonEmptyResourceName
    Tags: Optional[TagList] = None


class CreateAppInstanceUserRequest(BaseModel):
    AppInstanceArn: ChimeArn
    AppInstanceUserId: UserId
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Name: UserName
    Tags: Optional[TagList] = None


class CreateAttendeeRequest(BaseModel):
    ExternalUserId: ExternalUserIdType
    Tags: Optional[AttendeeTagList] = None


class CreateAttendeeRequestItem(BaseModel):
    ExternalUserId: ExternalUserIdType
    Tags: Optional[AttendeeTagList] = None


class CreateAttendeeRequestItemList(RootModel[List[CreateAttendeeRequestItem]]):
    root: List[CreateAttendeeRequestItem]


class CreateChannelBanResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    Member: Optional[Identity] = None


class CreateChannelMembershipResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    Member: Optional[Identity] = None


class CreateChannelModeratorResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    ChannelModerator: Optional[Identity] = None


class CreateChannelRequest(BaseModel):
    AppInstanceArn: ChimeArn
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Mode: Optional[ChannelMode] = None
    Name: NonEmptyResourceName
    Privacy: Optional[ChannelPrivacy] = None
    Tags: Optional[TagList] = None


class CreateMediaCapturePipelineRequest(BaseModel):
    ChimeSdkMeetingConfiguration_1: Optional[ChimeSdkMeetingConfiguration] = Field(
        None, alias='ChimeSdkMeetingConfiguration'
    )
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    SinkArn: Arn
    SinkType: MediaPipelineSinkType
    SourceArn: Arn
    SourceType: MediaPipelineSourceType


class CreateMeetingResponse(BaseModel):
    Meeting_1: Optional[Meeting] = Field(None, alias='Meeting')


class CreateMeetingWithAttendeesRequestItemList(
    RootModel[List[CreateAttendeeRequestItem]]
):
    root: List[CreateAttendeeRequestItem] = Field(..., max_length=10, min_length=1)


class CreateMeetingWithAttendeesResponse(BaseModel):
    Attendees: Optional[AttendeeList] = None
    Errors: Optional[BatchCreateAttendeeErrorList] = None
    Meeting_1: Optional[Meeting] = Field(None, alias='Meeting')


class CreatePhoneNumberOrderResponse(BaseModel):
    PhoneNumberOrder_1: Optional[PhoneNumberOrder] = Field(
        None, alias='PhoneNumberOrder'
    )


class CreateProxySessionResponse(BaseModel):
    ProxySession_1: Optional[ProxySession] = Field(None, alias='ProxySession')


class CreateRoomMembershipResponse(BaseModel):
    RoomMembership_1: Optional[RoomMembership] = Field(None, alias='RoomMembership')


class CreateRoomResponse(BaseModel):
    Room_1: Optional[Room] = Field(None, alias='Room')


class CreateSipMediaApplicationResponse(BaseModel):
    SipMediaApplication_1: Optional[SipMediaApplication] = Field(
        None, alias='SipMediaApplication'
    )


class CreateSipRuleRequest(BaseModel):
    Disabled: Optional[NullableBoolean] = None
    Name: SipRuleName
    TargetApplications: SipRuleTargetApplicationList
    TriggerType: SipRuleTriggerType
    TriggerValue: NonEmptyString


class CreateUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class CreateVoiceConnectorGroupRequest(BaseModel):
    Name: VoiceConnectorGroupName
    VoiceConnectorItems: Optional[VoiceConnectorItemList] = None


class CreateVoiceConnectorResponse(BaseModel):
    VoiceConnector_1: Optional[VoiceConnector] = Field(None, alias='VoiceConnector')


class DescribeAppInstanceAdminResponse(BaseModel):
    AppInstanceAdmin_1: Optional[AppInstanceAdmin] = Field(
        None, alias='AppInstanceAdmin'
    )


class DescribeChannelBanResponse(BaseModel):
    ChannelBan_1: Optional[ChannelBan] = Field(None, alias='ChannelBan')


class DescribeChannelMembershipForAppInstanceUserResponse(BaseModel):
    ChannelMembership: Optional[ChannelMembershipForAppInstanceUserSummary] = None


class DescribeChannelMembershipResponse(BaseModel):
    ChannelMembership_1: Optional[ChannelMembership] = Field(
        None, alias='ChannelMembership'
    )


class DescribeChannelModeratedByAppInstanceUserResponse(BaseModel):
    Channel: Optional[ChannelModeratedByAppInstanceUserSummary] = None


class DescribeChannelModeratorResponse(BaseModel):
    ChannelModerator_1: Optional[ChannelModerator] = Field(
        None, alias='ChannelModerator'
    )


class DescribeChannelResponse(BaseModel):
    Channel_1: Optional[Channel] = Field(None, alias='Channel')


class DisassociatePhoneNumbersFromVoiceConnectorGroupResponse(BaseModel):
    PhoneNumberErrors: Optional[PhoneNumberErrorList] = None


class DisassociatePhoneNumbersFromVoiceConnectorResponse(BaseModel):
    PhoneNumberErrors: Optional[PhoneNumberErrorList] = None


class DisassociateSigninDelegateGroupsFromAccountRequest(BaseModel):
    GroupNames: NonEmptyStringList


class GetAppInstanceRetentionSettingsResponse(BaseModel):
    AppInstanceRetentionSettings_1: Optional[AppInstanceRetentionSettings] = Field(
        None, alias='AppInstanceRetentionSettings'
    )
    InitiateDeletionTimestamp: Optional[Timestamp] = None


class GetChannelMessageResponse(BaseModel):
    ChannelMessage_1: Optional[ChannelMessage] = Field(None, alias='ChannelMessage')


class GetMeetingResponse(BaseModel):
    Meeting_1: Optional[Meeting] = Field(None, alias='Meeting')


class GetMessagingSessionEndpointResponse(BaseModel):
    Endpoint: Optional[MessagingSessionEndpoint] = None


class GetPhoneNumberOrderResponse(BaseModel):
    PhoneNumberOrder_1: Optional[PhoneNumberOrder] = Field(
        None, alias='PhoneNumberOrder'
    )


class GetProxySessionResponse(BaseModel):
    ProxySession_1: Optional[ProxySession] = Field(None, alias='ProxySession')


class GetRetentionSettingsResponse(BaseModel):
    InitiateDeletionTimestamp: Optional[Iso8601Timestamp] = None
    RetentionSettings_1: Optional[RetentionSettings] = Field(
        None, alias='RetentionSettings'
    )


class GetRoomResponse(BaseModel):
    Room_1: Optional[Room] = Field(None, alias='Room')


class GetSipMediaApplicationResponse(BaseModel):
    SipMediaApplication_1: Optional[SipMediaApplication] = Field(
        None, alias='SipMediaApplication'
    )


class GetUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class GetVoiceConnectorProxyResponse(BaseModel):
    Proxy_1: Optional[Proxy] = Field(None, alias='Proxy')


class GetVoiceConnectorResponse(BaseModel):
    VoiceConnector_1: Optional[VoiceConnector] = Field(None, alias='VoiceConnector')


class GetVoiceConnectorStreamingConfigurationResponse(BaseModel):
    StreamingConfiguration_1: Optional[StreamingConfiguration] = Field(
        None, alias='StreamingConfiguration'
    )


class ListAppInstanceUsersResponse(BaseModel):
    AppInstanceArn: Optional[ChimeArn] = None
    AppInstanceUsers: Optional[AppInstanceUserList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAppInstancesResponse(BaseModel):
    AppInstances: Optional[AppInstanceList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAttendeeTagsResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListChannelBansResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    ChannelBans: Optional[ChannelBanSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListChannelMembershipsForAppInstanceUserResponse(BaseModel):
    ChannelMemberships: Optional[ChannelMembershipForAppInstanceUserSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListChannelMembershipsResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    ChannelMemberships: Optional[ChannelMembershipSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListChannelMessagesResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    ChannelMessages: Optional[ChannelMessageSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListChannelModeratorsResponse(BaseModel):
    ChannelArn: Optional[ChimeArn] = None
    ChannelModerators: Optional[ChannelModeratorSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListChannelsModeratedByAppInstanceUserResponse(BaseModel):
    Channels: Optional[ChannelModeratedByAppInstanceUserSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMeetingTagsResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListMeetingsResponse(BaseModel):
    Meetings: Optional[MeetingList] = None
    NextToken: Optional[String] = None


class ListPhoneNumberOrdersResponse(BaseModel):
    NextToken: Optional[String] = None
    PhoneNumberOrders: Optional[PhoneNumberOrderList] = None


class ListProxySessionsResponse(BaseModel):
    NextToken: Optional[NextTokenString] = None
    ProxySessions_1: Optional[ProxySessions] = Field(None, alias='ProxySessions')


class ListRoomMembershipsResponse(BaseModel):
    NextToken: Optional[String] = None
    RoomMemberships: Optional[RoomMembershipList] = None


class ListRoomsResponse(BaseModel):
    NextToken: Optional[String] = None
    Rooms: Optional[RoomList] = None


class ListSipMediaApplicationsResponse(BaseModel):
    NextToken: Optional[NextTokenString] = None
    SipMediaApplications: Optional[SipMediaApplicationList] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListUsersResponse(BaseModel):
    NextToken: Optional[String] = None
    Users: Optional[UserList] = None


class ListVoiceConnectorsResponse(BaseModel):
    NextToken: Optional[String] = None
    VoiceConnectors: Optional[VoiceConnectorList] = None


class MediaCapturePipeline(BaseModel):
    ChimeSdkMeetingConfiguration_1: Optional[ChimeSdkMeetingConfiguration] = Field(
        None, alias='ChimeSdkMeetingConfiguration'
    )
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    MediaPipelineId: Optional[GuidString] = None
    SinkArn: Optional[Arn] = None
    SinkType: Optional[MediaPipelineSinkType] = None
    SourceArn: Optional[Arn] = None
    SourceType: Optional[MediaPipelineSourceType] = None
    Status: Optional[MediaPipelineStatus] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class MediaCapturePipelineList(RootModel[List[MediaCapturePipeline]]):
    root: List[MediaCapturePipeline]


class MeetingTagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class PhoneNumber(BaseModel):
    Associations: Optional[PhoneNumberAssociationList] = None
    CallingName_1: Optional[CallingName] = Field(None, alias='CallingName')
    CallingNameStatus_1: Optional[CallingNameStatus] = Field(
        None, alias='CallingNameStatus'
    )
    Capabilities: Optional[PhoneNumberCapabilities] = None
    Country: Optional[Alpha2CountryCode] = None
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    DeletionTimestamp: Optional[Iso8601Timestamp] = None
    E164PhoneNumber_1: Optional[E164PhoneNumber] = Field(None, alias='E164PhoneNumber')
    PhoneNumberId: Optional[String] = None
    ProductType: Optional[PhoneNumberProductType] = None
    Status: Optional[PhoneNumberStatus] = None
    Type: Optional[PhoneNumberType] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class PhoneNumberCountriesList(RootModel[List[PhoneNumberCountry]]):
    root: List[PhoneNumberCountry]


class PhoneNumberList(RootModel[List[PhoneNumber]]):
    root: List[PhoneNumber]


class PutAppInstanceRetentionSettingsRequest(BaseModel):
    AppInstanceRetentionSettings_1: AppInstanceRetentionSettings = Field(
        ..., alias='AppInstanceRetentionSettings'
    )


class PutAppInstanceRetentionSettingsResponse(BaseModel):
    AppInstanceRetentionSettings_1: Optional[AppInstanceRetentionSettings] = Field(
        None, alias='AppInstanceRetentionSettings'
    )
    InitiateDeletionTimestamp: Optional[Timestamp] = None


class PutRetentionSettingsRequest(BaseModel):
    RetentionSettings_1: RetentionSettings = Field(..., alias='RetentionSettings')


class PutRetentionSettingsResponse(BaseModel):
    InitiateDeletionTimestamp: Optional[Iso8601Timestamp] = None
    RetentionSettings_1: Optional[RetentionSettings] = Field(
        None, alias='RetentionSettings'
    )


class PutVoiceConnectorOriginationRequest(BaseModel):
    Origination_1: Origination = Field(..., alias='Origination')


class PutVoiceConnectorOriginationResponse(BaseModel):
    Origination_1: Optional[Origination] = Field(None, alias='Origination')


class PutVoiceConnectorStreamingConfigurationRequest(BaseModel):
    StreamingConfiguration_1: StreamingConfiguration = Field(
        ..., alias='StreamingConfiguration'
    )


class PutVoiceConnectorStreamingConfigurationResponse(BaseModel):
    StreamingConfiguration_1: Optional[StreamingConfiguration] = Field(
        None, alias='StreamingConfiguration'
    )


class ResetPersonalPINResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class RestorePhoneNumberResponse(BaseModel):
    PhoneNumber_1: Optional[PhoneNumber] = Field(None, alias='PhoneNumber')


class SipRule(BaseModel):
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    Disabled: Optional[Boolean] = None
    Name: Optional[SipRuleName] = None
    SipRuleId: Optional[NonEmptyString] = None
    TargetApplications: Optional[SipRuleTargetApplicationList] = None
    TriggerType: Optional[SipRuleTriggerType] = None
    TriggerValue: Optional[NonEmptyString] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None


class SipRuleList(RootModel[List[SipRule]]):
    root: List[SipRule]


class StartMeetingTranscriptionRequest(BaseModel):
    TranscriptionConfiguration_1: TranscriptionConfiguration = Field(
        ..., alias='TranscriptionConfiguration'
    )


class TagAttendeeRequest(BaseModel):
    Tags: AttendeeTagList


class TagMeetingRequest(BaseModel):
    Tags: MeetingTagList


class UpdatePhoneNumberResponse(BaseModel):
    PhoneNumber_1: Optional[PhoneNumber] = Field(None, alias='PhoneNumber')


class UpdateSipRuleResponse(BaseModel):
    SipRule_1: Optional[SipRule] = Field(None, alias='SipRule')


class UpdateUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class UpdateVoiceConnectorGroupRequest(BaseModel):
    Name: VoiceConnectorGroupName
    VoiceConnectorItems: VoiceConnectorItemList


class UpdateVoiceConnectorResponse(BaseModel):
    VoiceConnector_1: Optional[VoiceConnector] = Field(None, alias='VoiceConnector')


class VoiceConnectorGroup(BaseModel):
    CreatedTimestamp: Optional[Iso8601Timestamp] = None
    Name: Optional[VoiceConnectorGroupName] = None
    UpdatedTimestamp: Optional[Iso8601Timestamp] = None
    VoiceConnectorGroupArn: Optional[NonEmptyString] = None
    VoiceConnectorGroupId: Optional[NonEmptyString] = None
    VoiceConnectorItems: Optional[VoiceConnectorItemList] = None


class VoiceConnectorGroupList(RootModel[List[VoiceConnectorGroup]]):
    root: List[VoiceConnectorGroup]


class MediaCapturePipelinesPostRequest(BaseModel):
    ChimeSdkMeetingConfiguration_1: Optional[ChimeSdkMeetingConfiguration] = Field(
        None,
        alias='ChimeSdkMeetingConfiguration',
        description='The configuration object of the Amazon Chime SDK meeting for a specified media capture pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.',
    )
    ClientRequestToken: Optional[SecretStr] = Field(
        None,
        description='The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.',
    )
    SinkArn: SecretStr = Field(..., description='The ARN of the sink type.')
    SinkType_1: SinkType = Field(
        ...,
        alias='SinkType',
        description='Destination type to which the media artifacts are saved. You must use an S3 bucket. ',
    )
    SourceArn: SecretStr = Field(
        ...,
        description='ARN of the source from which the media artifacts are captured.',
    )
    SourceType_1: SourceType = Field(
        ...,
        alias='SourceType',
        description='Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.',
    )


class MeetingsOperationCreateAttendeesPostRequest(BaseModel):
    Attendees: Optional[List[CreateAttendeeRequestItem]] = Field(
        None,
        description='The request containing the attendees to create.',
        max_length=10,
        min_length=1,
    )
    ClientRequestToken: SecretStr = Field(
        ...,
        description='The unique identifier for the client request. Use a different token for different meetings.',
    )
    ExternalMeetingId: Optional[SecretStr] = Field(
        None, description='The external meeting ID.'
    )
    MediaRegion: Optional[str] = Field(
        None,
        description='<p> The Region in which to create the meeting. Default: <code>us-east-1</code> . </p> <p> Available values: <code>af-south-1</code> , <code>ap-northeast-1</code> , <code>ap-northeast-2</code> , <code>ap-south-1</code> , <code>ap-southeast-1</code> , <code>ap-southeast-2</code> , <code>ca-central-1</code> , <code>eu-central-1</code> , <code>eu-north-1</code> , <code>eu-south-1</code> , <code>eu-west-1</code> , <code>eu-west-2</code> , <code>eu-west-3</code> , <code>sa-east-1</code> , <code>us-east-1</code> , <code>us-east-2</code> , <code>us-west-1</code> , <code>us-west-2</code> . </p>',
    )
    MeetingHostId: Optional[SecretStr] = Field(None, description='Reserved.')
    NotificationsConfiguration_1: Optional[NotificationsConfiguration] = Field(
        None,
        alias='NotificationsConfiguration',
        description=' The resource target configurations for receiving Amazon Chime SDK meeting and attendee event notifications. The Amazon Chime SDK supports resource targets located in the US East (N. Virginia) AWS Region (<code>us-east-1</code>). ',
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tag key-value pairs.', max_length=50, min_length=1
    )


class MeetingsMeetingIdAttendeesOperationBatchCreatePostRequest(BaseModel):
    Attendees: List[CreateAttendeeRequestItem] = Field(
        ..., description='The request containing the attendees to create.'
    )


class AppInstanceAdminList(RootModel[List[AppInstanceAdminSummary]]):
    root: List[AppInstanceAdminSummary]


class BatchCreateAttendeeRequest(BaseModel):
    Attendees: CreateAttendeeRequestItemList


class CreateMediaCapturePipelineResponse(BaseModel):
    MediaCapturePipeline_1: Optional[MediaCapturePipeline] = Field(
        None, alias='MediaCapturePipeline'
    )


class CreateMeetingRequest(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    ExternalMeetingId: Optional[ExternalMeetingIdType] = None
    MediaRegion: Optional[String] = None
    MeetingHostId: Optional[ExternalUserIdType] = None
    NotificationsConfiguration: Optional[MeetingNotificationConfiguration] = None
    Tags: Optional[MeetingTagList] = None


class CreateMeetingWithAttendeesRequest(BaseModel):
    Attendees: Optional[CreateMeetingWithAttendeesRequestItemList] = None
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    ExternalMeetingId: Optional[ExternalMeetingIdType] = None
    MediaRegion: Optional[String] = None
    MeetingHostId: Optional[ExternalUserIdType] = None
    NotificationsConfiguration: Optional[MeetingNotificationConfiguration] = None
    Tags: Optional[MeetingTagList] = None


class CreateSipRuleResponse(BaseModel):
    SipRule_1: Optional[SipRule] = Field(None, alias='SipRule')


class CreateVoiceConnectorGroupResponse(BaseModel):
    VoiceConnectorGroup_1: Optional[VoiceConnectorGroup] = Field(
        None, alias='VoiceConnectorGroup'
    )


class GetMediaCapturePipelineResponse(BaseModel):
    MediaCapturePipeline_1: Optional[MediaCapturePipeline] = Field(
        None, alias='MediaCapturePipeline'
    )


class GetPhoneNumberResponse(BaseModel):
    PhoneNumber_1: Optional[PhoneNumber] = Field(None, alias='PhoneNumber')


class GetSipRuleResponse(BaseModel):
    SipRule_1: Optional[SipRule] = Field(None, alias='SipRule')


class GetVoiceConnectorGroupResponse(BaseModel):
    VoiceConnectorGroup_1: Optional[VoiceConnectorGroup] = Field(
        None, alias='VoiceConnectorGroup'
    )


class GetVoiceConnectorOriginationResponse(BaseModel):
    Origination_1: Optional[Origination] = Field(None, alias='Origination')


class ListAppInstanceAdminsResponse(BaseModel):
    AppInstanceAdmins: Optional[AppInstanceAdminList] = None
    AppInstanceArn: Optional[ChimeArn] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMediaCapturePipelinesResponse(BaseModel):
    MediaCapturePipelines: Optional[MediaCapturePipelineList] = None
    NextToken: Optional[String] = None


class ListPhoneNumbersResponse(BaseModel):
    NextToken: Optional[String] = None
    PhoneNumbers: Optional[PhoneNumberList] = None


class ListSipRulesResponse(BaseModel):
    NextToken: Optional[NextTokenString] = None
    SipRules: Optional[SipRuleList] = None


class ListSupportedPhoneNumberCountriesResponse(BaseModel):
    PhoneNumberCountries: Optional[PhoneNumberCountriesList] = None


class ListVoiceConnectorGroupsResponse(BaseModel):
    NextToken: Optional[String] = None
    VoiceConnectorGroups: Optional[VoiceConnectorGroupList] = None


class UpdateVoiceConnectorGroupResponse(BaseModel):
    VoiceConnectorGroup_1: Optional[VoiceConnectorGroup] = Field(
        None, alias='VoiceConnectorGroup'
    )
