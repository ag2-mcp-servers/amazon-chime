# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:56:23+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import SecretStr, conint, constr

from models import (
    AccessDeniedException,
    AccountsAccountIdBotsBotIdEventsConfigurationPutRequest,
    AccountsAccountIdBotsBotIdPostRequest,
    AccountsAccountIdBotsPostRequest,
    AccountsAccountIdOperationAssociateSigninDelegateGroupsPostRequest,
    AccountsAccountIdOperationDisassociateSigninDelegateGroupsPostRequest,
    AccountsAccountIdPostRequest,
    AccountsAccountIdRetentionSettingsPutRequest,
    AccountsAccountIdRoomsPostRequest,
    AccountsAccountIdRoomsRoomIdMembershipsMemberIdPostRequest,
    AccountsAccountIdRoomsRoomIdMembershipsOperationBatchCreatePostRequest,
    AccountsAccountIdRoomsRoomIdMembershipsPostRequest,
    AccountsAccountIdRoomsRoomIdPostRequest,
    AccountsAccountIdSettingsPutRequest,
    AccountsAccountIdUsersOperationAddPostRequest,
    AccountsAccountIdUsersOperationCreatePostRequest,
    AccountsAccountIdUsersOperationSuspendPostRequest,
    AccountsAccountIdUsersOperationUnsuspendPostRequest,
    AccountsAccountIdUsersPostRequest,
    AccountsAccountIdUsersUserIdOperationAssociatePhoneNumberPostRequest,
    AccountsAccountIdUsersUserIdPostRequest,
    AccountsAccountIdUsersUserIdSettingsPutRequest,
    AccountsPostRequest,
    AppInstancesAppInstanceArnAdminsPostRequest,
    AppInstancesAppInstanceArnPutRequest,
    AppInstancesAppInstanceArnRetentionSettingsPutRequest,
    AppInstancesAppInstanceArnStreamingConfigurationsPutRequest,
    AppInstancesPostRequest,
    AppInstanceUsersAppInstanceUserArnPutRequest,
    AppInstanceUsersPostRequest,
    AssociatePhoneNumbersWithVoiceConnectorGroupResponse,
    AssociatePhoneNumbersWithVoiceConnectorResponse,
    AssociatePhoneNumberWithUserResponse,
    AssociateSigninDelegateGroupsWithAccountResponse,
    BadRequestException,
    BatchCreateAttendeeResponse,
    BatchCreateChannelMembershipResponse,
    BatchCreateRoomMembershipResponse,
    BatchDeletePhoneNumberResponse,
    BatchSuspendUserResponse,
    BatchUnsuspendUserResponse,
    BatchUpdatePhoneNumberResponse,
    BatchUpdateUserResponse,
    ChannelsChannelArnBansPostRequest,
    ChannelsChannelArnMembershipsOperationBatchCreatePostRequest,
    ChannelsChannelArnMembershipsPostRequest,
    ChannelsChannelArnMessagesMessageIdPutRequest,
    ChannelsChannelArnMessagesPostRequest,
    ChannelsChannelArnModeratorsPostRequest,
    ChannelsChannelArnPutRequest,
    ChannelsPostRequest,
    ConflictException,
    CreateAccountResponse,
    CreateAppInstanceAdminResponse,
    CreateAppInstanceResponse,
    CreateAppInstanceUserResponse,
    CreateAttendeeResponse,
    CreateBotResponse,
    CreateChannelBanResponse,
    CreateChannelMembershipResponse,
    CreateChannelModeratorResponse,
    CreateChannelResponse,
    CreateMediaCapturePipelineResponse,
    CreateMeetingDialOutResponse,
    CreateMeetingResponse,
    CreateMeetingWithAttendeesResponse,
    CreatePhoneNumberOrderResponse,
    CreateProxySessionResponse,
    CreateRoomMembershipResponse,
    CreateRoomResponse,
    CreateSipMediaApplicationCallResponse,
    CreateSipMediaApplicationResponse,
    CreateSipRuleResponse,
    CreateUserResponse,
    CreateVoiceConnectorGroupResponse,
    CreateVoiceConnectorResponse,
    DeleteAccountResponse,
    DescribeAppInstanceAdminResponse,
    DescribeAppInstanceResponse,
    DescribeAppInstanceUserResponse,
    DescribeChannelBanResponse,
    DescribeChannelMembershipForAppInstanceUserResponse,
    DescribeChannelMembershipResponse,
    DescribeChannelModeratedByAppInstanceUserResponse,
    DescribeChannelModeratorResponse,
    DescribeChannelResponse,
    DisassociatePhoneNumberFromUserResponse,
    DisassociatePhoneNumbersFromVoiceConnectorGroupResponse,
    DisassociatePhoneNumbersFromVoiceConnectorResponse,
    DisassociateSigninDelegateGroupsFromAccountResponse,
    EmergencyCallingAddressPostRequest,
    FilterName,
    ForbiddenException,
    GetAccountResponse,
    GetAccountSettingsResponse,
    GetAppInstanceRetentionSettingsResponse,
    GetAppInstanceStreamingConfigurationsResponse,
    GetAttendeeResponse,
    GetBotResponse,
    GetChannelMessageResponse,
    GetEventsConfigurationResponse,
    GetGlobalSettingsResponse,
    GetMediaCapturePipelineResponse,
    GetMeetingResponse,
    GetMessagingSessionEndpointResponse,
    GetPhoneNumberOrderResponse,
    GetPhoneNumberResponse,
    GetPhoneNumberSettingsResponse,
    GetProxySessionResponse,
    GetRetentionSettingsResponse,
    GetRoomResponse,
    GetSipMediaApplicationLoggingConfigurationResponse,
    GetSipMediaApplicationResponse,
    GetSipRuleResponse,
    GetUserResponse,
    GetUserSettingsResponse,
    GetVoiceConnectorEmergencyCallingConfigurationResponse,
    GetVoiceConnectorGroupResponse,
    GetVoiceConnectorLoggingConfigurationResponse,
    GetVoiceConnectorOriginationResponse,
    GetVoiceConnectorProxyResponse,
    GetVoiceConnectorResponse,
    GetVoiceConnectorStreamingConfigurationResponse,
    GetVoiceConnectorTerminationHealthResponse,
    GetVoiceConnectorTerminationResponse,
    InviteUsersResponse,
    ListAccountsResponse,
    ListAppInstanceAdminsResponse,
    ListAppInstancesResponse,
    ListAppInstanceUsersResponse,
    ListAttendeesResponse,
    ListAttendeeTagsResponse,
    ListBotsResponse,
    ListChannelBansResponse,
    ListChannelMembershipsForAppInstanceUserResponse,
    ListChannelMembershipsResponse,
    ListChannelMessagesResponse,
    ListChannelModeratorsResponse,
    ListChannelsModeratedByAppInstanceUserResponse,
    ListChannelsResponse,
    ListMediaCapturePipelinesResponse,
    ListMeetingsResponse,
    ListMeetingTagsResponse,
    ListPhoneNumberOrdersResponse,
    ListPhoneNumbersResponse,
    ListProxySessionsResponse,
    ListRoomMembershipsResponse,
    ListRoomsResponse,
    ListSipMediaApplicationsResponse,
    ListSipRulesResponse,
    ListSupportedPhoneNumberCountriesResponse,
    ListTagsForResourceResponse,
    ListUsersResponse,
    ListVoiceConnectorGroupsResponse,
    ListVoiceConnectorsResponse,
    ListVoiceConnectorTerminationCredentialsResponse,
    LogoutUserResponse,
    MediaCapturePipelinesPostRequest,
    MeetingsMeetingIdAttendeesAttendeeIdTagsOperationAddPostRequest,
    MeetingsMeetingIdAttendeesAttendeeIdTagsOperationDeletePostRequest,
    MeetingsMeetingIdAttendeesOperationBatchCreatePostRequest,
    MeetingsMeetingIdAttendeesPostRequest,
    MeetingsMeetingIdDialOutsPostRequest,
    MeetingsMeetingIdTagsOperationAddPostRequest,
    MeetingsMeetingIdTagsOperationDeletePostRequest,
    MeetingsMeetingIdTranscriptionOperationStartPostRequest,
    MeetingsOperationCreateAttendeesPostRequest,
    MeetingsPostRequest,
    NotFoundException,
    Operation,
    Operation2,
    Operation4,
    Operation6,
    Operation8,
    Operation10,
    Operation12,
    Operation14,
    Operation16,
    Operation18,
    Operation20,
    Operation22,
    Operation24,
    Operation26,
    Operation28,
    Operation30,
    Operation32,
    Operation34,
    Operation36,
    Operation38,
    Operation40,
    Operation42,
    Operation44,
    Operation46,
    Operation48,
    Operation50,
    Operation52,
    Operation54,
    Operation56,
    Operation58,
    Operation60,
    Operation62,
    Operation64,
    Operation66,
    Operation68,
    PhoneNumberOrdersPostRequest,
    PhoneNumbersOperationBatchDeletePostRequest,
    PhoneNumbersOperationBatchUpdatePostRequest,
    PhoneNumbersPhoneNumberIdPostRequest,
    PhoneNumberType,
    Privacy,
    ProductType,
    PutAppInstanceRetentionSettingsResponse,
    PutAppInstanceStreamingConfigurationsResponse,
    PutEventsConfigurationResponse,
    PutRetentionSettingsResponse,
    PutSipMediaApplicationLoggingConfigurationResponse,
    PutVoiceConnectorEmergencyCallingConfigurationResponse,
    PutVoiceConnectorLoggingConfigurationResponse,
    PutVoiceConnectorOriginationResponse,
    PutVoiceConnectorProxyResponse,
    PutVoiceConnectorStreamingConfigurationResponse,
    PutVoiceConnectorTerminationResponse,
    RedactChannelMessageResponse,
    RedactConversationMessageResponse,
    RedactRoomMessageResponse,
    RegenerateSecurityTokenResponse,
    ResetPersonalPINResponse,
    ResourceLimitExceededException,
    RestorePhoneNumberResponse,
    Scope,
    Scope2,
    Scope4,
    Scope6,
    SearchAvailablePhoneNumbersResponse,
    SendChannelMessageResponse,
    ServiceFailureException,
    ServiceUnavailableException,
    SettingsPhoneNumberPutRequest,
    SettingsPutRequest,
    SipMediaApplicationsPostRequest,
    SipMediaApplicationsSipMediaApplicationIdCallsPostRequest,
    SipMediaApplicationsSipMediaApplicationIdCallsTransactionIdPostRequest,
    SipMediaApplicationsSipMediaApplicationIdLoggingConfigurationPutRequest,
    SipMediaApplicationsSipMediaApplicationIdPutRequest,
    SipRulesPostRequest,
    SipRulesSipRuleIdPutRequest,
    SortOrder,
    StartMeetingTranscriptionResponse,
    Status,
    Status2,
    StopMeetingTranscriptionResponse,
    TagsOperationTagResourcePostRequest,
    TagsOperationUntagResourcePostRequest,
    ThrottledClientException,
    Type,
    Type5,
    UnauthorizedClientException,
    UnprocessableEntityException,
    UpdateAccountResponse,
    UpdateAccountSettingsResponse,
    UpdateAppInstanceResponse,
    UpdateAppInstanceUserResponse,
    UpdateBotResponse,
    UpdateChannelMessageResponse,
    UpdateChannelReadMarkerResponse,
    UpdateChannelResponse,
    UpdatePhoneNumberResponse,
    UpdateProxySessionResponse,
    UpdateRoomMembershipResponse,
    UpdateRoomResponse,
    UpdateSipMediaApplicationCallResponse,
    UpdateSipMediaApplicationResponse,
    UpdateSipRuleResponse,
    UpdateUserResponse,
    UpdateVoiceConnectorGroupResponse,
    UpdateVoiceConnectorResponse,
    UserType,
    ValidateE911AddressResponse,
    VoiceConnectorGroupsPostRequest,
    VoiceConnectorGroupsVoiceConnectorGroupIdOperationAssociatePhoneNumbersPostRequest,
    VoiceConnectorGroupsVoiceConnectorGroupIdOperationDisassociatePhoneNumbersPostRequest,
    VoiceConnectorGroupsVoiceConnectorGroupIdPutRequest,
    VoiceConnectorsPostRequest,
    VoiceConnectorsVoiceConnectorIdEmergencyCallingConfigurationPutRequest,
    VoiceConnectorsVoiceConnectorIdLoggingConfigurationPutRequest,
    VoiceConnectorsVoiceConnectorIdOperationAssociatePhoneNumbersPostRequest,
    VoiceConnectorsVoiceConnectorIdOperationDisassociatePhoneNumbersPostRequest,
    VoiceConnectorsVoiceConnectorIdOriginationPutRequest,
    VoiceConnectorsVoiceConnectorIdProgrammableNumbersProxyPutRequest,
    VoiceConnectorsVoiceConnectorIdProxySessionsPostRequest,
    VoiceConnectorsVoiceConnectorIdProxySessionsProxySessionIdPostRequest,
    VoiceConnectorsVoiceConnectorIdPutRequest,
    VoiceConnectorsVoiceConnectorIdStreamingConfigurationPutRequest,
    VoiceConnectorsVoiceConnectorIdTerminationCredentialsOperationDeletePostRequest,
    VoiceConnectorsVoiceConnectorIdTerminationCredentialsOperationPutPostRequest,
    VoiceConnectorsVoiceConnectorIdTerminationPutRequest,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don\'t need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href="http://aws.amazon.com/developer/">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/installing.html">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href="https://docs.aws.amazon.com/cli/latest/reference/chime/index.html">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href="https://docs.aws.amazon.com/chime/latest/ag/security-iam.html">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon Chime',
    version='2018-05-01',
    servers=[
        {
            'description': 'The general Amazon Chime multi-region endpoint',
            'url': 'http://service.chime.aws.amazon.com',
            'variables': {},
        },
        {
            'description': 'The general Amazon Chime multi-region endpoint',
            'url': 'https://service.chime.aws.amazon.com',
            'variables': {},
        },
        {
            'description': 'The Amazon Chime endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://chime.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon Chime endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://chime.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/accounts',
    description=""" Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result. """,
    tags=['user_information_management', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_accounts(
    name: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=100)] = None,
    user_email: Optional[SecretStr] = Query(None, alias='user-email'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=200)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts',
    description=""" Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code> account types are currently supported for this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_account(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{accountId}',
    description=""" <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action to dodo.</p> <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.</p> <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore deleted account from your <code>Disabled</code> accounts list, you must contact AWS Support.</p> <p>After 90 days, deleted accounts are permanently removed from your <code>Disabled</code> accounts list.</p> """,
    tags=['security_token_operations', 'signin_delegation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_account(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}',
    description=""" Retrieves details for the specified Amazon Chime account, such as account type and supported licenses. """,
    tags=['security_token_operations', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_account(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}',
    description=""" Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action. """,
    tags=[
        'account_management',
        'user_information_management',
        'security_token_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_account(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}#operation=associate-signin-delegate-groups',
    description=""" Associates the specified sign-in delegate groups with the specified Amazon Chime account. """,
    tags=['signin_delegation_management', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_signin_delegate_groups_with_account(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    operation: Operation = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdOperationAssociateSigninDelegateGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}#operation=disassociate-signin-delegate-groups',
    description=""" Disassociates the specified sign-in delegate groups from the specified Amazon Chime account. """,
    tags=['signin_delegation_management', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_signin_delegate_groups_from_account(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    operation: Operation2 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdOperationDisassociateSigninDelegateGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/bots',
    description=""" Lists the bots associated with the administrator's Amazon Chime Enterprise account ID. """,
    tags=[
        'account_management',
        'user_information_management',
        'security_token_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_bots(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/bots',
    description=""" Creates a bot for an Amazon Chime Enterprise account. """,
    tags=['account_management', 'bot_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_bot(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdBotsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/bots/{botId}',
    description=""" Retrieves details for the specified bot, such as bot email address, bot type, status, and display name. """,
    tags=['bot_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_bot(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    bot_id: constr(pattern=r'.*\S.*') = Path(..., alias='botId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/bots/{botId}',
    description=""" Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account. """,
    tags=['account_management', 'bot_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_bot(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    bot_id: constr(pattern=r'.*\S.*') = Path(..., alias='botId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdBotsBotIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/bots/{botId}#operation=regenerate-security-token',
    description=""" Regenerates the security token for a bot. """,
    tags=['security_token_operations', 'bot_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def regenerate_security_token(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    bot_id: constr(pattern=r'.*\S.*') = Path(..., alias='botId'),
    operation: Operation4 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{accountId}/bots/{botId}/events-configuration',
    description=""" Deletes the events configuration that allows a bot to receive outgoing events. """,
    tags=['bot_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_events_configuration(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    bot_id: constr(pattern=r'.*\S.*') = Path(..., alias='botId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/bots/{botId}/events-configuration',
    description=""" Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN. """,
    tags=['bot_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_events_configuration(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    bot_id: constr(pattern=r'.*\S.*') = Path(..., alias='botId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{accountId}/bots/{botId}/events-configuration',
    description=""" Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see <a>Bot</a>. """,
    tags=['bot_management', 'event_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_events_configuration(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    bot_id: constr(pattern=r'.*\S.*') = Path(..., alias='botId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdBotsBotIdEventsConfigurationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/conversations/{conversationId}/messages/{messageId}#operation=redact',
    description=""" Redacts the specified message from the specified Amazon Chime conversation. """,
    tags=['message_privacy_operations', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def redact_conversation_message(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    conversation_id: constr(pattern=r'.*\S.*') = Path(..., alias='conversationId'),
    message_id: constr(pattern=r'.*\S.*') = Path(..., alias='messageId'),
    operation: Operation6 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/retention-settings',
    description="""  Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a> in the <i>Amazon Chime Administration Guide</i>.  """,
    tags=[
        'security_token_operations',
        'user_information_management',
        'account_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_retention_settings(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{accountId}/retention-settings',
    description=""" <p> Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see <a href="https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html">Logging Amazon Chime API Calls with AWS CloudTrail</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p> To turn off existing retention settings, remove the number of days from the corresponding <b>RetentionDays</b> field in the <b>RetentionSettings</b> object. For more information about retention settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a> in the <i>Amazon Chime Administration Guide</i>.</p> """,
    tags=['data_retention_settings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_retention_settings(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdRetentionSettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/rooms',
    description=""" Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to. """,
    tags=['membership_management', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_rooms(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    member_id: Optional[str] = Query(None, alias='member-id'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/rooms',
    description=""" Creates a chat room for the specified Amazon Chime Enterprise account. """,
    tags=['account_management', 'room_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_room(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdRoomsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{accountId}/rooms/{roomId}',
    description=""" Deletes a chat room in an Amazon Chime Enterprise account. """,
    tags=['room_operations', 'membership_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_room(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/rooms/{roomId}',
    description=""" Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account. """,
    tags=['room_operations', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_room(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/rooms/{roomId}',
    description=""" Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account. """,
    tags=['room_operations', 'user_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_room(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdRoomsRoomIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/rooms/{roomId}/memberships',
    description=""" Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names. """,
    tags=['room_operations', 'membership_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_room_memberships(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/rooms/{roomId}/memberships',
    description=""" Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member. """,
    tags=['membership_management', 'room_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_room_membership(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdRoomsRoomIdMembershipsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/rooms/{roomId}/memberships#operation=batch-create',
    description=""" Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member. """,
    tags=['membership_management', 'room_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_create_room_membership(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    operation: Operation8 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdRoomsRoomIdMembershipsOperationBatchCreatePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}',
    description=""" Removes a member from a chat room in an Amazon Chime Enterprise account. """,
    tags=['membership_management', 'room_operations', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_room_membership(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    member_id: constr(pattern=r'.*\S.*') = Path(..., alias='memberId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}',
    description=""" Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs. """,
    tags=['membership_management', 'room_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_room_membership(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    member_id: constr(pattern=r'.*\S.*') = Path(..., alias='memberId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdRoomsRoomIdMembershipsMemberIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/rooms/{roomId}/messages/{messageId}#operation=redact',
    description=""" Redacts the specified message from the specified Amazon Chime channel. """,
    tags=['room_operations', 'channel_message_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def redact_room_message(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    room_id: constr(pattern=r'.*\S.*') = Path(..., alias='roomId'),
    message_id: constr(pattern=r'.*\S.*') = Path(..., alias='messageId'),
    operation: Operation10 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/settings',
    description=""" Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dialout settings. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.  """,
    tags=['security_token_operations', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_account_settings(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{accountId}/settings',
    description=""" Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>. """,
    tags=['account_management', 'account_settings_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_account_settings(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdSettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/users',
    description=""" Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to. """,
    tags=[
        'account_management',
        'user_information_management',
        'security_token_operations',
        'user_settings_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_users(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    user_email: Optional[SecretStr] = Query(None, alias='user-email'),
    user_type: Optional[UserType] = Query(None, alias='user-type'),
    max_results: Union[
        Optional[conint(ge=1, le=200)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users',
    description=""" Updates user details within the <a>UpdateUserRequestItem</a> object for up to 20 users for the specified Amazon Chime account. Currently, only <code>LicenseType</code> updates are supported for this action. """,
    tags=['account_management', 'user_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_update_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users#operation=add',
    description=""" Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime <code>Team</code> account. Only <code>Team</code> account types are currently supported for this action. """,
    tags=[
        'account_management',
        'user_information_management',
        'user_settings_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def invite_users(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    operation: Operation12 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersOperationAddPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users#operation=create',
    description=""" Creates a user under the specified Amazon Chime account. """,
    tags=[
        'account_management',
        'user_information_management',
        'user_invitation_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    operation: Operation14 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersOperationCreatePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users#operation=suspend',
    description=""" <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Users suspended from a <code>Team</code> account are disassociated from the account,but they can continue to use Amazon Chime as free users. To remove the suspension from suspended <code>Team</code> account users, invite them to the <code>Team</code> account again. You can use the <a>InviteUsers</a> action to do so.</p> <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action.</p> <p> To sign out users without suspending them, use the <a>LogoutUser</a> action. </p> """,
    tags=[
        'account_management',
        'user_information_management',
        'user_session_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_suspend_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    operation: Operation16 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersOperationSuspendPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users#operation=unsuspend',
    description=""" <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code> accounts can be unsuspended using this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html"> Managing Your Amazon Chime Accounts </a> in the account types, in the <i>Amazon Chime Administration Guide</i>. </p> <p> Previously suspended users who are unsuspended using this action are returned to <code>Registered</code> status. Users who are not previously suspended are ignored. </p> """,
    tags=['account_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_unsuspend_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    operation: Operation18 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersOperationUnsuspendPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/users/{userId}',
    description=""" <p>Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.</p> <p> To retrieve user details with an email address instead of a user ID, use the <a>ListUsers</a> action, and then filter by email address. </p> """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    user_id: constr(pattern=r'.*\S.*') = Path(..., alias='userId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users/{userId}',
    description=""" Updates user details for a specified user ID. Currently, only <code>LicenseType</code> updates are supported for this action. """,
    tags=['user_information_management', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    user_id: constr(pattern=r'.*\S.*') = Path(..., alias='userId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersUserIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users/{userId}#operation=associate-phone-number',
    description=""" Associates a phone number with the specified Amazon Chime user. """,
    tags=['user_information_management', 'phone_number_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_phone_number_with_user(
    account_id: str = Path(..., alias='accountId'),
    user_id: str = Path(..., alias='userId'),
    operation: Operation20 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersUserIdOperationAssociatePhoneNumberPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users/{userId}#operation=disassociate-phone-number',
    description=""" Disassociates the primary provisioned phone number from the specified Amazon Chime user. """,
    tags=['user_information_management', 'account_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_phone_number_from_user(
    account_id: str = Path(..., alias='accountId'),
    user_id: str = Path(..., alias='userId'),
    operation: Operation22 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users/{userId}#operation=logout',
    description=""" Logs out the specified user from all of the devices they are currently logged into. """,
    tags=['user_information_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def logout_user(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    user_id: constr(pattern=r'.*\S.*') = Path(..., alias='userId'),
    operation: Operation24 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{accountId}/users/{userId}#operation=reset-personal-pin',
    description=""" Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the <a>User</a> object with the updated personal meeting PIN. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def reset_personal_p_i_n(
    account_id: constr(pattern=r'.*\S.*') = Path(..., alias='accountId'),
    user_id: constr(pattern=r'.*\S.*') = Path(..., alias='userId'),
    operation: Operation26 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{accountId}/users/{userId}/settings',
    description=""" Retrieves settings for the specified user ID, such as any associated phone number settings. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user_settings(
    account_id: str = Path(..., alias='accountId'),
    user_id: str = Path(..., alias='userId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{accountId}/users/{userId}/settings',
    description=""" Updates the settings for the specified user, such as phone number settings. """,
    tags=['account_settings_operations', 'user_settings_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_user_settings(
    account_id: str = Path(..., alias='accountId'),
    user_id: str = Path(..., alias='userId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAccountIdUsersUserIdSettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/app-instance-users',
    description=""" Creates a user under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>appInstanceUserId</code> and <code>Name</code> for that user. """,
    tags=[
        'user_information_management',
        'security_token_operations',
        'app_instance_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_app_instance_user(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstanceUsersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instance-users#app-instance-arn',
    description=""" List all <code>AppInstanceUsers</code> created under a single <code>AppInstance</code>.  """,
    tags=['app_instance_management', 'app_instance_retention_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_app_instance_users(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Query(..., alias='app-instance-arn'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/app-instance-users/{appInstanceUserArn}',
    description=""" Deletes an <code>AppInstanceUser</code>. """,
    tags=['security_token_operations', 'user_information_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_instance_user(
    app_instance_user_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceUserArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instance-users/{appInstanceUserArn}',
    description=""" Returns the full details of an <code>AppInstanceUser</code>. """,
    tags=['security_token_operations', 'app_instance_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_app_instance_user(
    app_instance_user_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceUserArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/app-instance-users/{appInstanceUserArn}',
    description=""" Updates the details of an <code>AppInstanceUser</code>. You can update names and metadata. """,
    tags=['user_information_management', 'app_instance_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_app_instance_user(
    app_instance_user_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceUserArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstanceUsersAppInstanceUserArnPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instances',
    description=""" Lists all Amazon Chime <code>AppInstance</code>s created under a single AWS account. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_app_instances(
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/app-instances',
    description=""" Creates an Amazon Chime SDK messaging <code>AppInstance</code> under an AWS account. Only SDK messaging customers use this API. <code>CreateAppInstance</code> supports idempotency behavior as described in the AWS API Standard. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_app_instance(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstancesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/app-instances/{appInstanceArn}',
    description=""" Deletes an <code>AppInstance</code> and all associated data asynchronously. """,
    tags=['app_instance_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_instance(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instances/{appInstanceArn}',
    description=""" Returns the full details of an <code>AppInstance</code>. """,
    tags=['security_token_operations', 'app_instance_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_app_instance(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/app-instances/{appInstanceArn}',
    description=""" Updates <code>AppInstance</code> metadata. """,
    tags=['app_instance_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_app_instance(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstancesAppInstanceArnPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instances/{appInstanceArn}/admins',
    description=""" Returns a list of the administrators in the <code>AppInstance</code>. """,
    tags=['app_instance_management', 'app_instance_retention_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_app_instance_admins(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/app-instances/{appInstanceArn}/admins',
    description=""" <p>Promotes an <code>AppInstanceUser</code> to an <code>AppInstanceAdmin</code>. The promoted user can perform the following actions. </p> <ul> <li> <p> <code>ChannelModerator</code> actions across all channels in the <code>AppInstance</code>.</p> </li> <li> <p> <code>DeleteChannelMessage</code> actions.</p> </li> </ul> <p>Only an <code>AppInstanceUser</code> can be promoted to an <code>AppInstanceAdmin</code> role.</p> """,
    tags=[
        'app_instance_management',
        'membership_management',
        'user_information_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_app_instance_admin(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstancesAppInstanceArnAdminsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}',
    description=""" Demotes an <code>AppInstanceAdmin</code> to an <code>AppInstanceUser</code>. This action does not delete the user. """,
    tags=['app_instance_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_instance_admin(
    app_instance_admin_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceAdminArn'),
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}',
    description=""" Returns the full details of an <code>AppInstanceAdmin</code>. """,
    tags=['app_instance_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_app_instance_admin(
    app_instance_admin_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceAdminArn'),
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instances/{appInstanceArn}/retention-settings',
    description=""" Gets the retention settings for an <code>AppInstance</code>. """,
    tags=['app_instance_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app_instance_retention_settings(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/app-instances/{appInstanceArn}/retention-settings',
    description=""" Sets the amount of time in days that a given <code>AppInstance</code> retains data. """,
    tags=[
        'data_retention_settings',
        'app_instance_management',
        'app_instance_retention_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_app_instance_retention_settings(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstancesAppInstanceArnRetentionSettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/app-instances/{appInstanceArn}/streaming-configurations',
    description=""" Deletes the streaming configurations of an <code>AppInstance</code>. """,
    tags=['app_instance_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app_instance_streaming_configurations(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/app-instances/{appInstanceArn}/streaming-configurations',
    description=""" Gets the streaming settings for an <code>AppInstance</code>. """,
    tags=['app_instance_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app_instance_streaming_configurations(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/app-instances/{appInstanceArn}/streaming-configurations',
    description=""" The data streaming configurations of an <code>AppInstance</code>. """,
    tags=['app_instance_management', 'app_instance_retention_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_app_instance_streaming_configurations(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='appInstanceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppInstancesAppInstanceArnStreamingConfigurationsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels',
    description=""" <p>Creates a channel to which you can add users and send messages.</p> <p> <b>Restriction</b>: You can't change a channel's privacy.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_channel(
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels#app-instance-arn',
    description=""" <p>Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.</p> <p class="title"> <b>Functionality &amp; restrictions</b> </p> <ul> <li> <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the account.</p> </li> <li> <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to list the private channels in an account.</p> </li> </ul> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['app_instance_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channels(
    app_instance_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Query(..., alias='app-instance-arn'),
    privacy: Optional[Privacy] = None,
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels#scope=app-instance-user-memberships',
    description=""" <p> Lists all channels that a particular <code>AppInstanceUser</code> is a part of. Only an <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their own. </p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'app_instance_management',
        'user_information_management',
        'user_session_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channel_memberships_for_app_instance_user(
    app_instance_user_arn: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Query(None, alias='app-instance-user-arn'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    scope: Scope = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels#scope=app-instance-user-moderated-channels',
    description=""" <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'user_information_management',
        'app_instance_management',
        'app_instance_retention_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channels_moderated_by_app_instance_user(
    app_instance_user_arn: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Query(None, alias='app-instance-user-arn'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    scope: Scope2 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{channelArn}',
    description=""" <p>Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['membership_management', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_channel(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}',
    description=""" <p>Returns the full details of a channel in an Amazon Chime <code>AppInstance</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_channel(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/channels/{channelArn}',
    description=""" <p>Update a channel's attributes.</p> <p> <b>Restriction</b>: You can't change a channel's privacy. </p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_operations', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_channel(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}#scope=app-instance-user-membership&app-instance-user-arn',
    description=""" <p> Returns the details of a channel based on the membership of the specified <code>AppInstanceUser</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_operations', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_channel_membership_for_app_instance_user(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    app_instance_user_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Query(..., alias='app-instance-user-arn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    scope: Scope4 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}#scope=app-instance-user-moderated-channel&app-instance-user-arn',
    description=""" <p>Returns the full details of a channel moderated by the specified <code>AppInstanceUser</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['membership_management', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_channel_moderated_by_app_instance_user(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    app_instance_user_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Query(..., alias='app-instance-user-arn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    scope: Scope6 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/bans',
    description=""" <p>Lists all the users banned from a particular channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_operations',
        'channel_membership_operations',
        'channel_moderation_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channel_bans(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{channelArn}/bans',
    description=""" <p>Permanently bans a member from a channel. Moderators can't add banned members to a channel. To undo a ban, you first have to <code>DeleteChannelBan</code>, and then <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or channels.</p> <p>If you ban a user who is already part of a channel, that user is automatically kicked from the channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_ban_operations', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_channel_ban(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnBansPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{channelArn}/bans/{memberArn}',
    description=""" <p>Removes a user from a channel's ban list.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['membership_management', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_channel_ban(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    member_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='memberArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/bans/{memberArn}',
    description=""" <p>Returns the full details of a channel ban.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['membership_management', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_channel_ban(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    member_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='memberArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/memberships',
    description=""" <p>Lists all channel memberships in a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_membership_operations',
        'channel_operations',
        'membership_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channel_memberships(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    type: Optional[Type] = None,
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{channelArn}/memberships',
    description=""" <p>Adds a user to a channel. The <code>InvitedBy</code> response field is derived from the request header. A channel member can:</p> <ul> <li> <p>List messages</p> </li> <li> <p>Send messages</p> </li> <li> <p>Receive messages</p> </li> <li> <p>Edit their own messages</p> </li> <li> <p>Leave the channel</p> </li> </ul> <p>Privacy settings impact this action as follows:</p> <ul> <li> <p>Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.</p> </li> <li> <p>Private Channels: You must be a member to list or send messages.</p> </li> </ul> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_membership_operations', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_channel_membership(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnMembershipsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{channelArn}/memberships#operation=batch-create',
    description=""" Adds a specified number of users to a channel. """,
    tags=['membership_management', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_create_channel_membership(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    operation: Operation28 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnMembershipsOperationBatchCreatePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{channelArn}/memberships/{memberArn}',
    description=""" <p>Removes a member from a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'membership_management',
        'channel_operations',
        'channel_membership_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_channel_membership(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    member_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='memberArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/memberships/{memberArn}',
    description=""" <p>Returns the full details of a user's channel membership.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'membership_management',
        'channel_operations',
        'channel_membership_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_channel_membership(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    member_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='memberArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/messages',
    description=""" <p>List all the messages in a channel. Returns a paginated list of <code>ChannelMessages</code>. By default, sorted by creation timestamp in descending order.</p> <note> <p>Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.</p> <p>Also, the x-amz-chime-bearer request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'membership_management',
        'channel_operations',
        'channel_membership_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channel_messages(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    sort_order: Optional[SortOrder] = Query(None, alias='sort-order'),
    not_before: Optional[datetime] = Query(None, alias='not-before'),
    not_after: Optional[datetime] = Query(None, alias='not-after'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{channelArn}/messages',
    description=""" <p>Sends a message to a particular channel that the member is a part of.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> <p>Also, <code>STANDARD</code> messages can contain 4KB of data and the 1KB of metadata. <code>CONTROL</code> messages can contain 30 bytes of data and no metadata.</p> </note> """,
    tags=[
        'channel_operations',
        'channel_membership_operations',
        'channel_message_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def send_channel_message(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnMessagesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{channelArn}/messages/{messageId}',
    description=""" <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by <code>UpdateChannelMessage</code>.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_message_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_channel_message(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    message_id: constr(pattern=r'[-_a-zA-Z0-9]*', min_length=1, max_length=128) = Path(
        ..., alias='messageId'
    ),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/messages/{messageId}',
    description=""" <p>Gets the full details of a channel message.</p> <note> <p>The x-amz-chime-bearer request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_message_operations', 'channel_membership_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_channel_message(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    message_id: constr(pattern=r'[-_a-zA-Z0-9]*', min_length=1, max_length=128) = Path(
        ..., alias='messageId'
    ),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/channels/{channelArn}/messages/{messageId}',
    description=""" <p>Updates the content of a message.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['channel_message_operations', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_channel_message(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    message_id: constr(pattern=r'[-_a-zA-Z0-9]*', min_length=1, max_length=128) = Path(
        ..., alias='messageId'
    ),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnMessagesMessageIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{channelArn}/messages/{messageId}#operation=redact',
    description=""" <p>Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_message_operations',
        'channel_membership_operations',
        'channel_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def redact_channel_message(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    message_id: constr(pattern=r'[-_a-zA-Z0-9]*', min_length=1, max_length=128) = Path(
        ..., alias='messageId'
    ),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    operation: Operation30 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/moderators',
    description=""" <p>Lists all the moderators for a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_operations',
        'channel_membership_operations',
        'membership_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_channel_moderators(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    max_results: Union[
        Optional[conint(ge=1, le=50)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[SecretStr], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{channelArn}/moderators',
    description=""" <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p> <ul> <li> <p>Add and remove other members of the channel.</p> </li> <li> <p>Add and remove other moderators of the channel.</p> </li> <li> <p>Add and remove user bans for the channel.</p> </li> <li> <p>Redact messages in the channel.</p> </li> <li> <p>List messages in the channel.</p> </li> </ul> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_moderation_operations',
        'channel_membership_operations',
        'channel_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_channel_moderator(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ChannelsChannelArnModeratorsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{channelArn}/moderators/{channelModeratorArn}',
    description=""" <p>Deletes a channel moderator.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_moderator_management',
        'channel_membership_operations',
        'channel_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_channel_moderator(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    channel_moderator_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelModeratorArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{channelArn}/moderators/{channelModeratorArn}',
    description=""" <p>Returns the full details of a single ChannelModerator.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=[
        'channel_moderator_management',
        'channel_operations',
        'channel_membership_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_channel_moderator(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    channel_moderator_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelModeratorArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/channels/{channelArn}/readMarker',
    description=""" <p>The details of the time when a user last read messages in a channel.</p> <note> <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p> </note> """,
    tags=['security_token_operations', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_channel_read_marker(
    channel_arn: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=5,
        max_length=1600,
    ) = Path(..., alias='channelArn'),
    x_amz_chime_bearer: Optional[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=5,
            max_length=1600,
        )
    ] = Header(None, alias='x-amz-chime-bearer'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/emergency-calling/address',
    description=""" Validates an address to be used for 911 calls made with Amazon Chime Voice Connectors. You can use validated addresses in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point. """,
    tags=['emergency_address_validation', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def validate_e911_address(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: EmergencyCallingAddressPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/endpoints/messaging-session',
    description=""" The details of the endpoint for the messaging session. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_messaging_session_endpoint(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/media-capture-pipelines',
    description=""" Returns a list of media capture pipelines. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_media_capture_pipelines(
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/media-capture-pipelines',
    description=""" Creates a media capture pipeline. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_media_capture_pipeline(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MediaCapturePipelinesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/media-capture-pipelines/{mediaPipelineId}',
    description=""" Deletes the media capture pipeline. """,
    tags=['media_pipeline_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_media_capture_pipeline(
    media_pipeline_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='mediaPipelineId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/media-capture-pipelines/{mediaPipelineId}',
    description=""" Gets an existing media capture pipeline. """,
    tags=['media_pipeline_management', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_media_capture_pipeline(
    media_pipeline_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='mediaPipelineId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meetings',
    description="""  Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i>. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_meetings(
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings',
    description="""  Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a> in the <i>Amazon Chime SDK Developer Guide</i> . For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i> .  """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_meeting(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings#operation=create-attendees',
    description="""  Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a> in the <i>Amazon Chime SDK Developer Guide</i> . For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i> .  """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_meeting_with_attendees(
    operation: Operation32,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsOperationCreateAttendeesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/meetings/{meetingId}',
    description=""" Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from joining the meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i>. """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_meeting(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meetings/{meetingId}',
    description="""  Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i> .  """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_meeting(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meetings/{meetingId}/attendees',
    description="""  Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i>.  """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_attendees(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/attendees',
    description="""  Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i>.  """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_attendee(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdAttendeesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/attendees#operation=batch-create',
    description="""  Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i>.  """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_create_attendee(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    operation: Operation34 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdAttendeesOperationBatchCreatePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/meetings/{meetingId}/attendees/{attendeeId}',
    description=""" Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i>. """,
    tags=['attendee_operations', 'meeting_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_attendee(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    attendee_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='attendeeId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meetings/{meetingId}/attendees/{attendeeId}',
    description="""  Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime SDK Developer Guide</i> .  """,
    tags=['attendee_operations', 'meeting_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_attendee(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    attendee_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='attendeeId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meetings/{meetingId}/attendees/{attendeeId}/tags',
    description=""" Lists the tags applied to an Amazon Chime SDK attendee resource. """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_attendee_tags(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    attendee_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='attendeeId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/attendees/{attendeeId}/tags#operation=add',
    description=""" Applies the specified tags to the specified Amazon Chime SDK attendee. """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_attendee(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    attendee_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='attendeeId'),
    operation: Operation36 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdAttendeesAttendeeIdTagsOperationAddPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/attendees/{attendeeId}/tags#operation=delete',
    description=""" Untags the specified tags from the specified Amazon Chime SDK attendee. """,
    tags=['meeting_management', 'attendee_operations', 'meeting_tag_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_attendee(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    attendee_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='attendeeId'),
    operation: Operation38 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdAttendeesAttendeeIdTagsOperationDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/dial-outs',
    description=""" <p>Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.</p> <p>To play welcome audio or implement an interactive voice response (IVR), use the <code>CreateSipMediaApplicationCall</code> action with the corresponding SIP media application ID.</p> """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_meeting_dial_out(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdDialOutsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/meetings/{meetingId}/tags',
    description=""" Lists the tags applied to an Amazon Chime SDK meeting resource. """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_meeting_tags(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/tags#operation=add',
    description=""" Applies the specified tags to the specified Amazon Chime SDK meeting. """,
    tags=['meeting_management', 'meeting_tag_operations', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_meeting(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    operation: Operation40 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdTagsOperationAddPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/tags#operation=delete',
    description=""" Untags the specified tags from the specified Amazon Chime SDK meeting. """,
    tags=['meeting_management', 'meeting_tag_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_meeting(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    operation: Operation42 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdTagsOperationDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/transcription#operation=start',
    description=""" <p>Starts transcription for the specified <code>meetingId</code>. For more information, refer to <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html"> Using Amazon Chime SDK live transcription </a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> <p>If you specify an invalid configuration, a <code>TranscriptFailed</code> event will be sent with the contents of the <code>BadRequestException</code> generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html">StartStreamTranscription</a> API in the <i>Amazon Transcribe Developer Guide</i>.</p> <important> <p>Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the <a href="https://aws.amazon.com/service-terms/">AWS Service Terms</a>, including the terms specific to the AWS Machine Learning and Artificial Intelligence Services.</p> </important> """,
    tags=['meeting_management', 'meeting_transcription_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_meeting_transcription(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    operation: Operation44 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: MeetingsMeetingIdTranscriptionOperationStartPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/meetings/{meetingId}/transcription#operation=stop',
    description=""" Stops transcription for the specified <code>meetingId</code>. """,
    tags=['meeting_management', 'attendee_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_meeting_transcription(
    meeting_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='meetingId'),
    operation: Operation46 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/phone-number-countries#product-type',
    description=""" Lists supported phone number countries. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_supported_phone_number_countries(
    product_type: ProductType = Query(..., alias='product-type'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/phone-number-orders',
    description=""" Lists the phone number orders for the administrator's Amazon Chime account. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_phone_number_orders(
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/phone-number-orders',
    description=""" Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type. """,
    tags=['phone_number_order_management', 'phone_number_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_phone_number_order(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PhoneNumberOrdersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/phone-number-orders/{phoneNumberOrderId}',
    description=""" Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status. """,
    tags=[
        'phone_number_management',
        'phone_number_order_management',
        'phone_number_configuration_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_phone_number_order(
    phone_number_order_id: constr(
        pattern=r'[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}'
    ) = Path(..., alias='phoneNumberOrderId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/phone-numbers',
    description=""" Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group. """,
    tags=['security_token_operations', 'user_session_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_phone_numbers(
    status: Optional[Status] = None,
    product_type: Optional[ProductType] = Query(None, alias='product-type'),
    filter_name: Optional[FilterName] = Query(None, alias='filter-name'),
    filter_value: Optional[str] = Query(None, alias='filter-value'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/phone-numbers#operation=batch-delete',
    description=""" <p> Moves phone numbers into the <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted. </p> <p> Phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently. </p> """,
    tags=['phone_number_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_delete_phone_number(
    operation: Operation48,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PhoneNumbersOperationBatchDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/phone-numbers#operation=batch-update',
    description=""" <p>Updates phone number product types or calling names. You can update one attribute at a time for each <code>UpdatePhoneNumberRequestItem</code>. For example, you can update the product type or the calling name.</p> <p>For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p> """,
    tags=[
        'phone_number_management',
        'phone_number_configuration_management',
        'phone_number_order_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_update_phone_number(
    operation: Operation50,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PhoneNumbersOperationBatchUpdatePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/phone-numbers/{phoneNumberId}',
    description=""" <p>Moves the specified phone number into the <b>Deletion queue</b>. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.</p> <p>Deleted phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p> """,
    tags=['phone_number_management', 'phone_number_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_phone_number(
    phone_number_id: str = Path(..., alias='phoneNumberId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/phone-numbers/{phoneNumberId}',
    description=""" Retrieves details for the specified phone number ID, such as associations, capabilities, and product type. """,
    tags=['phone_number_management', 'phone_number_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_phone_number(
    phone_number_id: str = Path(..., alias='phoneNumberId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/phone-numbers/{phoneNumberId}',
    description=""" <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p> <p>For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.</p> <p>Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p> """,
    tags=['phone_number_management', 'phone_number_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_phone_number(
    phone_number_id: str = Path(..., alias='phoneNumberId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PhoneNumbersPhoneNumberIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/phone-numbers/{phoneNumberId}#operation=restore',
    description=""" Moves a phone number from the <b>Deletion queue</b> back into the phone number <b>Inventory</b>. """,
    tags=['phone_number_management', 'phone_number_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def restore_phone_number(
    phone_number_id: constr(pattern=r'.*\S.*') = Path(..., alias='phoneNumberId'),
    operation: Operation52 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search#type=phone-numbers',
    description=""" Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: <code>AreaCode</code>, <code>City</code>, <code>State</code>, or <code>TollFreePrefix</code>. If you provide <code>City</code>, you must also provide <code>State</code>. Numbers outside the US only support the <code>PhoneNumberType</code> filter, which you must use. """,
    tags=[
        'phone_number_management',
        'phone_number_configuration_management',
        'emergency_address_validation',
        'phone_number_order_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_available_phone_numbers(
    area_code: Optional[str] = Query(None, alias='area-code'),
    city: Optional[str] = None,
    country: Optional[constr(pattern=r'[A-Z]{2}')] = None,
    state: Optional[str] = None,
    toll_free_prefix: Optional[
        constr(pattern=r'^8(00|33|44|55|66|77|88)$', min_length=3, max_length=3)
    ] = Query(None, alias='toll-free-prefix'),
    phone_number_type: Optional[PhoneNumberType] = Query(
        None, alias='phone-number-type'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    type: Type5 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings',
    description=""" Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_global_settings(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/settings',
    description=""" Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_global_settings(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/phone-number',
    description=""" Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_phone_number_settings(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/settings/phone-number',
    description=""" Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update. """,
    tags=['phone_number_management', 'phone_number_configuration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_phone_number_settings(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SettingsPhoneNumberPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sip-media-applications',
    description=""" Lists the SIP media applications under the administrator's AWS account. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_sip_media_applications(
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[constr(max_length=65535)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sip-media-applications',
    description=""" Creates a SIP media application. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_sip_media_application(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipMediaApplicationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sip-media-applications/{sipMediaApplicationId}',
    description=""" Deletes a SIP media application. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_sip_media_application(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sip-media-applications/{sipMediaApplicationId}',
    description=""" Retrieves the information for a SIP media application, including name, AWS Region, and endpoints. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_sip_media_application(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sip-media-applications/{sipMediaApplicationId}',
    description=""" Updates the details of the specified SIP media application. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_sip_media_application(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipMediaApplicationsSipMediaApplicationIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sip-media-applications/{sipMediaApplicationId}/calls',
    description=""" Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified <code>sipMediaApplicationId</code>. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_sip_media_application_call(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipMediaApplicationsSipMediaApplicationIdCallsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sip-media-applications/{sipMediaApplicationId}/calls/{transactionId}',
    description=""" Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request. The Lambda function can then return a new set of actions. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_sip_media_application_call(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    transaction_id: constr(pattern=r'.*\S.*') = Path(..., alias='transactionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipMediaApplicationsSipMediaApplicationIdCallsTransactionIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sip-media-applications/{sipMediaApplicationId}/logging-configuration',
    description=""" Returns the logging configuration for the specified SIP media application. """,
    tags=['sip_media_application_operations', 'security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_sip_media_application_logging_configuration(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sip-media-applications/{sipMediaApplicationId}/logging-configuration',
    description=""" Updates the logging configuration for the specified SIP media application. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_sip_media_application_logging_configuration(
    sip_media_application_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='sipMediaApplicationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipMediaApplicationsSipMediaApplicationIdLoggingConfigurationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sip-rules',
    description=""" Lists the SIP rules under the administrator's AWS account. """,
    tags=['sip_media_application_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_sip_rules(
    sip_media_application: Optional[constr(pattern=r'.*\S.*')] = Query(
        None, alias='sip-media-application'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    next_token: Union[
        Optional[constr(max_length=65535)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sip-rules',
    description=""" Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type. """,
    tags=['security_token_operations', 'sip_rule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_sip_rule(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipRulesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sip-rules/{sipRuleId}',
    description=""" Deletes a SIP rule. You must disable a SIP rule before you can delete it. """,
    tags=['sip_rule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_sip_rule(
    sip_rule_id: constr(pattern=r'.*\S.*') = Path(..., alias='sipRuleId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sip-rules/{sipRuleId}',
    description=""" Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints. """,
    tags=['sip_rule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_sip_rule(
    sip_rule_id: constr(pattern=r'.*\S.*') = Path(..., alias='sipRuleId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sip-rules/{sipRuleId}',
    description=""" Updates the details of the specified SIP rule. """,
    tags=['sip_rule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_sip_rule(
    sip_rule_id: constr(pattern=r'.*\S.*') = Path(..., alias='sipRuleId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SipRulesSipRuleIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags#arn',
    description=""" Lists the tags applied to an Amazon Chime SDK meeting resource. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    arn: SecretStr,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tags#operation=tag-resource',
    description=""" Applies the specified tags to the specified Amazon Chime SDK meeting resource. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    operation: Operation54,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TagsOperationTagResourcePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tags#operation=untag-resource',
    description=""" Untags the specified tags from the specified Amazon Chime SDK meeting resource. """,
    tags=['security_token_operations', 'tagging_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    operation: Operation56,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TagsOperationUntagResourcePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connector-groups',
    description=""" Lists the Amazon Chime Voice Connector groups for the administrator's AWS account. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_voice_connector_groups(
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connector-groups',
    description=""" <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including <code>VoiceConnectorItems</code> in the request.</p> <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.</p> """,
    tags=['voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_voice_connector_group(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connector-groups/{voiceConnectorGroupId}',
    description=""" Deletes the specified Amazon Chime Voice Connector group. Any <code>VoiceConnectorItems</code> and phone numbers associated with the group must be removed before it can be deleted. """,
    tags=['voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_group(
    voice_connector_group_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='voiceConnectorGroupId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connector-groups/{voiceConnectorGroupId}',
    description="""  Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated <code>VoiceConnectorItems</code>. """,
    tags=['voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_group(
    voice_connector_group_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='voiceConnectorGroupId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connector-groups/{voiceConnectorGroupId}',
    description=""" Updates details of the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking. """,
    tags=['voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_voice_connector_group(
    voice_connector_group_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='voiceConnectorGroupId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorGroupsVoiceConnectorGroupIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connector-groups/{voiceConnectorGroupId}#operation=associate-phone-numbers',
    description=""" Associates phone numbers with the specified Amazon Chime Voice Connector group. """,
    tags=['phone_number_management', 'voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_phone_numbers_with_voice_connector_group(
    voice_connector_group_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='voiceConnectorGroupId'
    ),
    operation: Operation58 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorGroupsVoiceConnectorGroupIdOperationAssociatePhoneNumbersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connector-groups/{voiceConnectorGroupId}#operation=disassociate-phone-numbers',
    description=""" Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group. """,
    tags=['phone_number_management', 'voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_phone_numbers_from_voice_connector_group(
    voice_connector_group_id: constr(pattern=r'.*\S.*') = Path(
        ..., alias='voiceConnectorGroupId'
    ),
    operation: Operation60 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorGroupsVoiceConnectorGroupIdOperationDisassociatePhoneNumbersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors',
    description=""" Lists the Amazon Chime Voice Connectors for the administrator's AWS account. """,
    tags=['security_token_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_voice_connectors(
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors',
    description=""" <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p> <p> Enabling <a>CreateVoiceConnectorRequest$RequireEncryption</a> configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked. </p> """,
    tags=[
        'security_token_operations',
        'voice_connector_management',
        'voice_connector_group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_voice_connector(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}',
    description=""" Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted. """,
    tags=['voice_connector_management', 'voice_connector_health_check'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}',
    description=""" Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements. """,
    tags=['voice_connector_management', 'voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}',
    description=""" Updates details for the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_group_management',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_voice_connector(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors/{voiceConnectorId}#operation=associate-phone-numbers',
    description=""" Associates phone numbers with the specified Amazon Chime Voice Connector. """,
    tags=[
        'phone_number_management',
        'voice_connector_management',
        'voice_connector_group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_phone_numbers_with_voice_connector(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    operation: Operation62 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdOperationAssociatePhoneNumbersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors/{voiceConnectorId}#operation=disassociate-phone-numbers',
    description=""" Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector. """,
    tags=[
        'phone_number_management',
        'voice_connector_management',
        'voice_connector_group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_phone_numbers_from_voice_connector(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    operation: Operation64 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdOperationDisassociatePhoneNumbersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}/emergency-calling-configuration',
    description=""" Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_logging',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_emergency_calling_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/emergency-calling-configuration',
    description=""" Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_logging',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_emergency_calling_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}/emergency-calling-configuration',
    description=""" Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured. """,
    tags=['voice_connector_emergency_calling_management', 'voice_connector_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_emergency_calling_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdEmergencyCallingConfigurationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/logging-configuration',
    description=""" Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs. """,
    tags=['voice_connector_management', 'voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_logging_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}/logging-configuration',
    description=""" Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs. """,
    tags=['voice_connector_logging', 'voice_connector_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_logging_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdLoggingConfigurationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}/origination',
    description=""" <p>Deletes the origination settings for the specified Amazon Chime Voice Connector.</p> <note> <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.</p> </note> """,
    tags=['voice_connector_management', 'voice_connector_security_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_origination(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/origination',
    description=""" Retrieves origination setting details for the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_group_management',
        'voice_connector_logging',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_origination(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}/origination',
    description=""" <p>Adds origination settings for the specified Amazon Chime Voice Connector.</p> <note> <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.</p> </note> """,
    tags=['voice_connector_management', 'voice_connector_origination_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_origination(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdOriginationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy',
    description=""" Deletes the proxy configuration from the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_group_management',
        'voice_connector_logging',
        'voice_connector_origination_management',
        'voice_connector_emergency_calling_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_proxy(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy',
    description=""" Gets the proxy configuration details for the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_management', 'voice_connector_health_check'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_proxy(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy',
    description=""" Puts the specified proxy configuration to the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_management', 'voice_connector_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_proxy(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdProgrammableNumbersProxyPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/proxy-sessions',
    description=""" Lists the proxy sessions for the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_management', 'voice_connector_health_check'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_proxy_sessions(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    status: Optional[Status2] = None,
    next_token: Union[
        Optional[constr(max_length=65535)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=99)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors/{voiceConnectorId}/proxy-sessions',
    description=""" Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers. """,
    tags=['voice_connector_management', 'proxy_session_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_proxy_session(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdProxySessionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}',
    description=""" Deletes the specified proxy session from the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_management', 'proxy_session_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_proxy_session(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    proxy_session_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='proxySessionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}',
    description=""" Gets the specified proxy session details for the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_management', 'proxy_session_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_proxy_session(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    proxy_session_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='proxySessionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}',
    description=""" Updates the specified proxy session details, such as voice or SMS capabilities. """,
    tags=['voice_connector_management', 'proxy_session_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_proxy_session(
    voice_connector_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='voiceConnectorId'
    ),
    proxy_session_id: constr(pattern=r'.*\S.*', min_length=1, max_length=128) = Path(
        ..., alias='proxySessionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdProxySessionsProxySessionIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}/streaming-configuration',
    description=""" Deletes the streaming configuration for the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_logging',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_streaming_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/streaming-configuration',
    description=""" Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data. """,
    tags=[
        'voice_connector_management',
        'voice_connector_logging',
        'voice_connector_origination_management',
        'voice_connector_emergency_calling_management',
        'voice_connector_streaming_configurations',
        'voice_connector_termination_management',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_streaming_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}/streaming-configuration',
    description=""" Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data. """,
    tags=['voice_connector_streaming_configurations', 'voice_connector_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_streaming_configuration(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdStreamingConfigurationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/voice-connectors/{voiceConnectorId}/termination',
    description=""" <p>Deletes the termination settings for the specified Amazon Chime Voice Connector.</p> <note> <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.</p> </note> """,
    tags=[
        'voice_connector_management',
        'voice_connector_logging',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_termination(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/termination',
    description=""" Retrieves termination setting details for the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_logging',
        'voice_connector_origination_management',
        'voice_connector_emergency_calling_management',
        'voice_connector_streaming_configurations',
        'voice_connector_termination_management',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_termination(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice-connectors/{voiceConnectorId}/termination',
    description=""" <p>Adds termination settings for the specified Amazon Chime Voice Connector.</p> <note> <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.</p> </note> """,
    tags=['voice_connector_management', 'voice_connector_termination_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_termination(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdTerminationPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/termination/credentials',
    description=""" Lists the SIP credentials for the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_management', 'voice_connector_health_check'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_voice_connector_termination_credentials(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors/{voiceConnectorId}/termination/credentials#operation=delete',
    description=""" Deletes the specified SIP credentials used by your equipment to authenticate during call termination. """,
    tags=['voice_connector_termination_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_voice_connector_termination_credentials(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    operation: Operation66 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdTerminationCredentialsOperationDeletePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice-connectors/{voiceConnectorId}/termination/credentials#operation=put',
    description=""" Adds termination SIP credentials for the specified Amazon Chime Voice Connector. """,
    tags=['voice_connector_termination_management', 'voice_connector_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_voice_connector_termination_credentials(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    operation: Operation68 = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VoiceConnectorsVoiceConnectorIdTerminationCredentialsOperationPutPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice-connectors/{voiceConnectorId}/termination/health',
    description=""" Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector. """,
    tags=[
        'voice_connector_management',
        'voice_connector_group_management',
        'voice_connector_logging',
        'voice_connector_origination_management',
        'voice_connector_emergency_calling_management',
        'voice_connector_streaming_configurations',
        'voice_connector_termination_management',
        'voice_connector_health_check',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_voice_connector_termination_health(
    voice_connector_id: constr(pattern=r'.*\S.*') = Path(..., alias='voiceConnectorId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
